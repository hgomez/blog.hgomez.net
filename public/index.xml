<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Rico&#39;s Blog</title>
    <link>http://localhost:1313/</link>
    <description>Recent content on Rico&#39;s Blog</description>
    <generator>Hugo -- 0.128.0</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 02 Mar 2015 13:20:23 +0200</lastBuildDate>
    <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Gitlab custom hooks - Bash Way</title>
      <link>http://localhost:1313/post/20150302-gitlab-custom-hooks-bash-way/</link>
      <pubDate>Mon, 02 Mar 2015 13:20:23 +0200</pubDate>
      <guid>http://localhost:1313/post/20150302-gitlab-custom-hooks-bash-way/</guid>
      <description>If you’re using Gitlab, you may know you could use custom hooks to validate contents. Everything is detailed in http://doc.gitlab.com/ce/hooks/custom_hooks.html
I found many examples where hooks are Ruby based and using Gitlab APIs but I wanted something in good old bash.
I found some bash hooks, https://github.com/Praqma/git-hooks, but 7 months old. They still works with Gitlab 7.8.1 and adapted them for my purposes.
Here is a sample pre-receive hook :</description>
    </item>
    <item>
      <title>CentOS &amp; RHEL and up to date Subversion and Git</title>
      <link>http://localhost:1313/post/20150226-centos-and-rhel-and-up-to-date-subversion-and-git/</link>
      <pubDate>Thu, 26 Feb 2015 13:20:23 +0200</pubDate>
      <guid>http://localhost:1313/post/20150226-centos-and-rhel-and-up-to-date-subversion-and-git/</guid>
      <description>If you’re using CentOS/RHEL 5, 6 or 7, you have noticed bundled subversion and git are quite old. It could be a problem if you need to use smart features, like Sparse Checkout. Also Jenkins Git Plugin recommand version 1.7 or higher.
Of course, you could recompile git from sources, but it’s better to use prebuilt packages.
Here enter Wandisco Wandisco provides up to date Subversion RPMs for CentOS 5/6/7 :</description>
    </item>
    <item>
      <title>CVE-2014-8139 and activation-1.1.1.jar</title>
      <link>http://localhost:1313/post/20150224-cve-2014-8139-and-activation-1.1.1.jar/</link>
      <pubDate>Tue, 24 Feb 2015 13:20:23 +0200</pubDate>
      <guid>http://localhost:1313/post/20150224-cve-2014-8139-and-activation-1.1.1.jar/</guid>
      <description>While rebuilding archiva RPM package, I noticed some openSUSE systems to complains about invalid jar file for activation-1.1.1.jar
http://central.maven.org/maven2/javax/activation/activation/1.1.1/activation-1.1.1.jar Unzip indicate an error :
unzip -t activation-1.1.1.jar Archive: activation-1.1.1.jar testing: META-INF/ bad extra-field entry: EF block length (0 bytes) invalid (&amp;lt; 4) testing: META-INF/MANIFEST.MF OK Same for zip
zip -T activation-1.1.1.jar META-INF/ bad extra-field entry: EF block length (0 bytes) invalid (&amp;lt; 4) test of activation-1.1.1.jar FAILED zip error: Zip file invalid, could not spawn unzip, or wrong unzip (original files unmodified) It seems related to CVE-2014-8139, referenced by RH for example :</description>
    </item>
    <item>
      <title>VirtualBox 4.3.22 and network drives</title>
      <link>http://localhost:1313/post/20150223-virtualbox-4.3.22-and-network-drives/</link>
      <pubDate>Mon, 23 Feb 2015 13:20:23 +0200</pubDate>
      <guid>http://localhost:1313/post/20150223-virtualbox-4.3.22-and-network-drives/</guid>
      <description>If you upgraded from VirtualBox 4.3.20 to 4.3.22 and use Vbox network shares, you may have noticed shares are reported as unmounted, even if they are available.
This is a well known issue :
https://forums.virtualbox.org/viewtopic.php?f=2&amp;amp;t=66081 https://forums.virtualbox.org/viewtopic.php?f=1&amp;amp;t=66067#p312765
Solution for now is to revert to 4.3.20 (VB and extension) or wait for upcoming VirtualBox release</description>
    </item>
    <item>
      <title>Mountain Lion and Apxs</title>
      <link>http://localhost:1313/post/20121015-mountain-lion-and-apxs/index.md/</link>
      <pubDate>Mon, 15 Oct 2012 13:20:23 +0200</pubDate>
      <guid>http://localhost:1313/post/20121015-mountain-lion-and-apxs/index.md/</guid>
      <description>Mountain Lion came with a version of apxs where C compiler and pre-processor are defined to a location not in phase with XCode 4.5.
If you try to build any apxs related modules or Tomcat Native Library, it will fail like this :
checking build system type... x86_64-apple-darwin12.2.0 checking host system type... x86_64-apple-darwin12.2.0 checking target system type... x86_64-apple-darwin12.2.0 checking for a BSD-compatible install... /usr/bin/install -c checking for working mkdir -p... yes Tomcat Native Version: 1.</description>
    </item>
    <item>
      <title>Understanding Java From Command Line on OSX</title>
      <link>http://localhost:1313/post/20120720-understanding-java-from-command-line-on-osx/</link>
      <pubDate>Fri, 20 Jul 2012 13:20:23 +0200</pubDate>
      <guid>http://localhost:1313/post/20120720-understanding-java-from-command-line-on-osx/</guid>
      <description>Java on OSX OSX is a good platform for Java development but also running Java applications. Sadly XServe servers are no more available but in many cases Mac Mini could to pretty good works as Java server applications.
For a long time, OSX Java was maintained by Apple, from Sun Hotspot and was often a bit late vs Windows/Linux releases.
With Lion, Apple announced that they won’t produce Java for their futures OS, starting with Mountain Lion (10.</description>
    </item>
    <item>
      <title>Building Universal Apache Tomcat Native Library on OSX - Updated</title>
      <link>http://localhost:1313/post/20120613-building-universal-apache-tomcat-native-library-on-osx-updated/</link>
      <pubDate>Wed, 13 Jun 2012 13:20:23 +0200</pubDate>
      <guid>http://localhost:1313/post/20120613-building-universal-apache-tomcat-native-library-on-osx-updated/</guid>
      <description>Updated build process for tomcat-connector, 1.1.24, no more APXS variable or configure parameters required
TCN_RELEASE=1.1.24 curl http://mir2.ovh.net/ftp.apache.org/dist//tomcat/tomcat-connectors/native/$TCN_RELEASE/source/tomcat-native-$TCN_RELEASE-src.tar.gz -o tomcat-native-$TCN_RELEASE-src.tar.gz tar xvzf tomcat-native-$TCN_RELEASE-src.tar.gz cd tomcat-native-$TCN_RELEASE-src/jni/native CFLAGS=&amp;#39;-arch i386 -arch x86_64&amp;#39; APXSLDFLAGS=&amp;#39;-arch i386 -arch x86_64&amp;#39; ./configure --with-apr=/usr --with-ssl=/usr --with-java-home=/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home make clean make sudo cp .libs/libtcnative-1.0.1.24.dylib /usr/lib/java sudo rm -f /usr/lib/java/libtcnative-1.dylib sudo ln -s /usr/lib/java/libtcnative-1.0.1.24.dylib /usr/lib/java/libtcnative-1.dylib A note about Lion If you get Java on Lion using the java command on terminal or via the Java Developer Package for Mac OS X 10.</description>
    </item>
    <item>
      <title>Building Universal Apache Tomcat Connector (Mod_jk) on OSX</title>
      <link>http://localhost:1313/post/20120321-building-universal-apache-tomcat-connector-mod_jk-on-osx/</link>
      <pubDate>Wed, 21 Mar 2012 13:20:23 +0200</pubDate>
      <guid>http://localhost:1313/post/20120321-building-universal-apache-tomcat-connector-mod_jk-on-osx/</guid>
      <description>Build Universal Apache Tomcat Connector (mod_jk) for OSX follow tricks used for Apache Tomcat Native Library.
CFLAGS=&amp;#39;-arch i386 -arch x86_64&amp;#39; APXSLDFLAGS=&amp;#39;-arch i386-arch x86_64&amp;#39; Here is a small script to do it :
#!/bin/sh # JK_VERSION=1.2.37 curl http://mir2.ovh.net/ftp.apache.org/dist/tomcat/tomcat-connectors/jk/tomcat-connectors-${JK_VERSION}-src.tar.gz -o tomcat-connectors-${JK_VERSION}-src.tar.gz tar xvzf tomcat-connectors-${JK_VERSION}-src.tar.gz cd tomcat-connectors-${JK_VERSION}-src/native ./configure --with-apxs=/usr/sbin/apxs CFLAGS=&amp;#39;-arch i386 -arch x86_64&amp;#39; APXSLDFLAGS=&amp;#39;-arch i386-arch x86_64&amp;#39; make clean make Installation is pretty simple :
sudo cp apache-2.0/.libs/mod_jk.so /usr/libexec/apache2/ You could then restart your Apache HTTPd server to get new mod_jk used :</description>
    </item>
    <item>
      <title>Using Apache Tomcat Connector (Mod_jk) on OSX</title>
      <link>http://localhost:1313/post/20120321-using-apache-tomcat-connector-mod_jk-on-osx/</link>
      <pubDate>Wed, 21 Mar 2012 13:20:23 +0200</pubDate>
      <guid>http://localhost:1313/post/20120321-using-apache-tomcat-connector-mod_jk-on-osx/</guid>
      <description>You’ll need first mod_jk installed, follow Building Guide.
Create /etc/apache2/other/jk.conf :
# Load JK Module LoadModule jk_module libexec/apache2/mod_jk.so # JK workers.properties JkWorkersFile /etc/apache2/other/workers.properties # JK shared memory location JkShmFile /var/log/apache2/mod_jk.shm # JK logs JkLogFile /var/log/apache2/mod_jk.log # JK log level [debug/error/info] JkLogLevel info # JK timestamp log format JkLogStampFormat &amp;#34;[%a %b %d %H:%M:%S %Y] &amp;#34; Create /etc/apache2/other/workers.properties
worker.list=jenkins,watch,manage # Set properties for worker jenkins (ajp13) worker.jenkins.type=ajp13 worker.jenkins.host=localhost worker.jenkins.port=8009 # status workers worker.</description>
    </item>
    <item>
      <title>To SSD or Not To SSD</title>
      <link>http://localhost:1313/post/20120318-to-ssd-or-not-to-ssd/</link>
      <pubDate>Sun, 18 Mar 2012 13:20:23 +0200</pubDate>
      <guid>http://localhost:1313/post/20120318-to-ssd-or-not-to-ssd/</guid>
      <description>My MacBookPro is quite old now :
MacBook Pro 5.1 (Late 2008) Core2Duo 2.66Ghz Under Lion, MBP appears to be sometime laggy even if I already updated it :
Replaced original 4Gb RAM to 8Gb DDR3 (GSkill PC8500 SQ (1066 MHz), 7-7-7-20) Replaced original Hitachi 320GB/5400 RPM by a 500Gb WesternDigital Black Black 7200RPM (WD5000BEKT-75KA9T0) I run GeekBench 2.2.7 and give me a bench result of 3752 :
Benchmark Summary Integer Score 3123 | Floating Point Score 5493 | Memory Score 2629 | Stream Score 2110 | Geekbench Score 3752 | System Information Operating System Mac OS X 10.</description>
    </item>
    <item>
      <title>DevOps Logo - 2nd Try</title>
      <link>http://localhost:1313/post/20120220-devops-logo-2nd-try/</link>
      <pubDate>Mon, 20 Feb 2012 13:20:23 +0200</pubDate>
      <guid>http://localhost:1313/post/20120220-devops-logo-2nd-try/</guid>
      <description>Here is the second try of logos for DevOps, still provided by Sabrina (@saabpii). She carefully tracked comments here and on Twitter :
Please vote for your preferred one.</description>
    </item>
    <item>
      <title>DevOps Logo</title>
      <link>http://localhost:1313/post/20120208-devops-logos/</link>
      <pubDate>Wed, 08 Feb 2012 13:20:23 +0200</pubDate>
      <guid>http://localhost:1313/post/20120208-devops-logos/</guid>
      <description>I asked some times ago Sabrina Perrin (@saabpii) a great graphic designer I worked with for years, if she could try to works on some DevOps logo.
As expected she has been very motivated and inspired.
Here are the results :
Now I need you to comments and votes for them.
All of this artwork is free to use, just mention Sabrina somewhere on your sites/blogs/presentations.
Thanks again Sabrina !</description>
    </item>
    <item>
      <title>Uninstalling MacFuse on Lion</title>
      <link>http://localhost:1313/post/20120128-uninstalling-macfuse-on-lion/</link>
      <pubDate>Sat, 28 Jan 2012 13:20:23 +0200</pubDate>
      <guid>http://localhost:1313/post/20120128-uninstalling-macfuse-on-lion/</guid>
      <description>If you installed MacFuse on Lion (10.7) and tried to uninstall you may encountered the following error :
sudo /Library/Filesystems/fusefs.fs/Support/uninstall-macfuse-core.sh MacFUSE Uninstaller: Can not find the Archive.bom for MacFUSE Core package. Uninstaller didn’t check for Lion (uname -r reporting 11.x). So fix is easy, just edit uninstaller script /Library/Filesystems/fusefs.fs/Support/uninstall-macfuse-core.sh and add 11_) in case next to 10_)
... OS_RELEASE=`/usr/bin/uname -r` case &amp;#34;$OS_RELEASE&amp;#34; in 8*) log &amp;#34;Incorrect uninstall. Use the Tiger version please.</description>
    </item>
    <item>
      <title>Batch Rpm Signing</title>
      <link>http://localhost:1313/post/20111228-batch-rpm-signing/</link>
      <pubDate>Wed, 28 Dec 2011 13:20:23 +0200</pubDate>
      <guid>http://localhost:1313/post/20111228-batch-rpm-signing/</guid>
      <description>I’m using Jenkins to build RPMs with free-style scripts.
Decent RPM packager should sign his RPMs so they could be checked by yum/zypper tools.
Here you could be in trouble since rpm signing require a password to be passed in command line :
rpm --addsign -D &amp;#34;_signature gpg&amp;#34; -D &amp;#34;_gpg_name packagers@myforge.org&amp;#34; RPMS/noarch/myjenkins-1.0.0-1.noarch.rpm&amp;lt;br /&amp;gt; Enter pass phrase:&amp;lt;br /&amp;gt; It’s quite problematic for a RPM build factory.
After digging around Internet, best solution appears to be using expect and I developped a simple script for such purpose with following constraints :</description>
    </item>
    <item>
      <title>Iozone and Gnuplot 4.x</title>
      <link>http://localhost:1313/post/20111103-iozone-and-gnuplot-4.x/</link>
      <pubDate>Thu, 03 Nov 2011 13:20:23 +0200</pubDate>
      <guid>http://localhost:1313/post/20111103-iozone-and-gnuplot-4.x/</guid>
      <description>Iozone is a great tool to mesure performance of filesystem. You could find 10 examples here.
In it latest version, 3.97, it came with reporting tools, report.pl and gengnuplot.sh, who use gnuplot to render images. Due to changes in GnuPlot 4.x, report.pl and gnu3d.dem need to be updated to works. Also you may get only 8 metrics in reports instead of 15 expected in latest release of report.pl
gnu3d.dem # # $Id: 3D plot of performance # # Processes files that were created by Generate_Graphs # and displays the results.</description>
    </item>
    <item>
      <title>Building Universal Apache Tomcat Native Library on OSX</title>
      <link>http://localhost:1313/post/20110713-building-universal-apache-tomcat-native-library-on-osx/</link>
      <pubDate>Wed, 13 Jul 2011 13:20:23 +0200</pubDate>
      <guid>http://localhost:1313/post/20110713-building-universal-apache-tomcat-native-library-on-osx/</guid>
      <description>I recently notice that my Apache Tomcat running on OS/X 10.6.8 couldn’t use Apache Tomcat Native Library.
INFO: The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: .:/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java Jul 13, 2011 11:02:30 AM org.apache.coyote.http11.Http11Protocol init After digging around and with the help of ASFer Mladen Turk, I figure my previous build was stick to 64bits mode only and I switched my JVM to 32bits mode using -d32.</description>
    </item>
    <item>
      <title>Apple JDK &amp; OpenJDK - Back to Benchs</title>
      <link>http://localhost:1313/post/20110416-apple-jdk-and-openjdk-back-to-benchs/</link>
      <pubDate>Sat, 16 Apr 2011 13:20:23 +0200</pubDate>
      <guid>http://localhost:1313/post/20110416-apple-jdk-and-openjdk-back-to-benchs/</guid>
      <description>It’s good to see works in progress for Aqua/Cocoa - AWT ports but what about JVM performances ?
Test vms I selected 4 VMs to be tested
Apple Java 1.6.0_22 - java version &amp;quot;1.6.0_22&amp;quot; Java(TM) SE Runtime Environment (build 1.6.0_22-b04-314-10M3406a) Java HotSpot(TM) 64-Bit Server VM (build 17.1-b03-314, mixed mode)
Apple Java 1.6.0_24 - java version &amp;quot;1.6.0_24&amp;quot; Java(TM) SE Runtime Environment (build 1.6.0_24-b07-348-10M3406a) Java HotSpot(TM) 64-Bit Server VM (build 19.1-b02-348, mixed mode)</description>
    </item>
    <item>
      <title>OpenJDK 7 on OSX and IntelliJ IDEA EAP</title>
      <link>http://localhost:1313/post/20110416-openjdk-7-on-osx-and-intellij-idea-eap/</link>
      <pubDate>Sat, 16 Apr 2011 13:20:23 +0200</pubDate>
      <guid>http://localhost:1313/post/20110416-openjdk-7-on-osx-and-intellij-idea-eap/</guid>
      <description>During the last weeks, Apple started to contribute it’s Aqua/Cocoa port to OpenJDK 7 on the macosx-port branch. It’s still works it progress but it was nice to see some SWING apps like IntelliJ IDEA works on the preliminary release.
I used IntelliJ IDEA EAP (10.5) and tweaked it’s startup shell.sh to define AWT_TOOLKIT=CToolkit and add -Dswing.defaultlaf=com.apple.laf.AquaLookAndFeel since Aqua Look and Feel is not default for now.
export CLASSPATH LD_LIBRARY_PATH=.:$LD_LIBRARY_PATH export LD_LIBRARY_PATHAWT_TOOLKIT AWT/Cocoa port for OpenJDK 7 macosx-port export=CToolkit JVM_ARGS=”-Dswing.</description>
    </item>
    <item>
      <title>Apple JDK with OpenJDK – Core2Duo vs I7</title>
      <link>http://localhost:1313/post/20110413-apple-jdk-with-openjdkcore2duo-vs-i7/</link>
      <pubDate>Wed, 13 Apr 2011 13:20:23 +0200</pubDate>
      <guid>http://localhost:1313/post/20110413-apple-jdk-with-openjdkcore2duo-vs-i7/</guid>
      <description>Previously I did benchmark of Apple VMs and OpenJDK 6 and I wanted to see how all of the JVMs available today on our Mac on two systems, an old Core2Duo and a newer i7. And also see how they perform 32 / 64 bits kernel mode.
So I redo full dacapo bench suite to include OpenJDK 6, and we have now 5 VMs (3 Java 6 and 2 Java 7) :</description>
    </item>
    <item>
      <title>Tomcat Maven Plugin and Apache Tomcat Post 6.0.29</title>
      <link>http://localhost:1313/post/20110311-tomcat-maven-plugin-and-apache-tomcat-post-6.0.29/</link>
      <pubDate>Fri, 11 Mar 2011 13:20:23 +0200</pubDate>
      <guid>http://localhost:1313/post/20110311-tomcat-maven-plugin-and-apache-tomcat-post-6.0.29/</guid>
      <description>If you’re using the Tomcat Maven Plugin and want to use post 6.0.29 Apache Tomcat, ie latest 6.0.32, you should update your pom to handle a change in artifact.
Up to 6.0.29, Eclipse JDT compiler was bundled as jasper-jdt :
&amp;lt;groupId&amp;gt;org.apache.tomcat&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;jasper-jdt&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;6.0.29&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; With 6.0.30, Apache Tomcat team started to bundle Eclipse JDT directly:
[xml] org.eclipse.jdt.core.compiler ecj 3.5.1 [/xml]
As consequence, org.apache.tomcat/jasper-jdt artifact didn’t exist anymore after release 6.0.29.</description>
    </item>
    <item>
      <title>OpenJDK 1.7 for OSX Benchs</title>
      <link>http://localhost:1313/post/20101204-openjdk-1.7-for-osx-benchs/</link>
      <pubDate>Sat, 04 Dec 2010 13:20:23 +0200</pubDate>
      <guid>http://localhost:1313/post/20101204-openjdk-1.7-for-osx-benchs/</guid>
      <description>After building and packaging OpenJDK 1.7 for OS/X, I wanted to see how performed new VMs.
Test vms Recents OpenJDK 1.7 32 and 64bits where used :
openjdk version &amp;quot;1.7.0-internal&amp;quot; OpenJDK Runtime Environment (build 1.7.0-internal-henri_2010_12_01_00_46-b00) OpenJDK Server VM (build 20.0-b02, mixed mode)
openjdk version &amp;quot;1.7.0-internal&amp;quot; OpenJDK Runtime Environment (build 1.7.0-internal-henri_2010_12_01_00_49-b00) OpenJDK 64-Bit Server VM (build 20.0-b02, mixed mode)
Test system My test system is an Apple Mac Book Pro (MacBookPro5,1) with Intel Core 2 Duo 2.</description>
    </item>
    <item>
      <title>20101126 - OpenJDK 1.7 for OSX Continuous Build With Hudson – Part 3</title>
      <link>http://localhost:1313/post/20101126-openjdk-1.7-for-osx-continuous-build-with-hudson-part-3/</link>
      <pubDate>Fri, 26 Nov 2010 13:20:23 +0200</pubDate>
      <guid>http://localhost:1313/post/20101126-openjdk-1.7-for-osx-continuous-build-with-hudson-part-3/</guid>
      <description>Gildas and I create a project on GoogleCode where we’ll maintain build/package scripts and provide packages.
My Dropbox download page was overloaded and we needed another location, here is it :
http://code.google.com/p/openjdk-osx-build/
Contributors are very welcome, especially OS/X gurus</description>
    </item>
    <item>
      <title>OpenJDK 1.7 for OSX Continuous Build With Hudson - Part 2</title>
      <link>http://localhost:1313/post/20101125-openjdk-1.7-for-osx-continuous-build-with-hudson-part-2/</link>
      <pubDate>Thu, 25 Nov 2010 13:20:23 +0200</pubDate>
      <guid>http://localhost:1313/post/20101125-openjdk-1.7-for-osx-continuous-build-with-hudson-part-2/</guid>
      <description>First episode of OpenJDK 1.7 for OS/X covered build of 32 and 64 bits VM via Hudson.
We ended with two VMs, 32bits was under build/bsd-i586/j2sdk-image and 64bits in build/bsd-amd64/j2sdk-image And here appears a new OS/X jedi, Gildas, providing .PKG and .DMG scripting.
This episode will describe how packaging, PKG and DMG was done.
OS/X Package .PKG First we need to transform j2sdk-image folder into .PKG
We used OS/X packagemaker, provided by XCode :</description>
    </item>
    <item>
      <title>OpenJDK 1.7 for OSX Continuous Build With Hudson - Part 1</title>
      <link>http://localhost:1313/post/20101121-openjdk-1.7-for-osx-continuous-build-with-hudson-part-1/</link>
      <pubDate>Sun, 21 Nov 2010 13:20:23 +0200</pubDate>
      <guid>http://localhost:1313/post/20101121-openjdk-1.7-for-osx-continuous-build-with-hudson-part-1/</guid>
      <description>Pre-requisite an OS/X box, under Snow Leopard, 32 and 64bits mode should works XCode Mercurial with hgforest extension (see my previous article on Mercurial and hgforest) Hudson with its Mercurial Plugin Hudson jobs I created free-style software project jobs, one for building 32 bits JVM, openjdk-1.7-i586, the other to build 64 bits JVM, openjdk-1.7-x86_64.
Each one will use self sufficient script, each script will :
download soylatte JVMs (i386/amd64) under $HUDSON_HOME/DROP_DIR (so it could be reused for future builds).</description>
    </item>
    <item>
      <title>Forest Extension Fixes for Mercurial 1.7</title>
      <link>http://localhost:1313/post/20101116-forest-extension-fixes-for-mercurial-1.7/</link>
      <pubDate>Tue, 16 Nov 2010 13:20:23 +0200</pubDate>
      <guid>http://localhost:1313/post/20101116-forest-extension-fixes-for-mercurial-1.7/</guid>
      <description>I’m using Mercurial 1.7 from MacPorts to sync with OpenJDK sources. This operation is usually done with hg fclone
[bash] hg fclone http://hg.openjdk.java.net/bsd-port/bsd-port [/bash]
fclone came from forest
Mercurial 1.7 changes some API and call to do_read should be changed to _call.
Hopefully, I found a maintained Forest for Mercurial by GXTI and they now handle correctly pre/post Mercurial 1.6 or 1.7.
To install this updated extension.
hg clone https://bitbucket.org/gxti/hgforest Make sure this forest.</description>
    </item>
    <item>
      <title>OSX - OpenJDK 6 vs Apple JDK 6</title>
      <link>http://localhost:1313/post/20101108-osx-openjdk-6-vs-apple-jdk-6/</link>
      <pubDate>Mon, 08 Nov 2010 13:20:23 +0200</pubDate>
      <guid>http://localhost:1313/post/20101108-osx-openjdk-6-vs-apple-jdk-6/</guid>
      <description>From finished building OpenJDK 6 on OS / X Snowleopard, I wanted to test just to see how he behaved towards the implementation of Apple. I used a development version of MacPorts (see it trac) that appears very promising and got OpenJDK 1.6.0-b20.
openjdk version &amp;quot;1.6.0&amp;quot; OpenJDK Runtime Environment (build 1.6.0-b20) OpenJDK 64-Bit Server VM (build 17.0-b16, mixed mode)
A Java application with GUI under OS/X - OpenJDK First test was to launched a big application like Eclipse under OS/X with OpenJDK.</description>
    </item>
    <item>
      <title>Maven JMeter Plugin</title>
      <link>http://localhost:1313/post/20101104-maven-jmeter-plugin/</link>
      <pubDate>Thu, 04 Nov 2010 13:20:23 +0200</pubDate>
      <guid>http://localhost:1313/post/20101104-maven-jmeter-plugin/</guid>
      <description>While playing with JMeter Maven plugin, I got some problems :
First the official Jakarta plugin is pretty old and no more maintened.
So you should get a new one, from GoogleCode This project moved to GitHub
Great project but it miss 2 dependencies, commons-logging and soap Without commons-logging your tests may fail and you could see :
Error in NonGUIDriver java.lang.NullPointerException [INFO] ———————————————————————— [ERROR] BUILD FAILURE [INFO] ———————————————————————— [INFO] There were test errors The fix is easy, get the plugin project and add the following dependencies in it :</description>
    </item>
    <item>
      <title>Unifying Handling of Tomcat and HTTP Error Pages</title>
      <link>http://localhost:1313/post/20101024-unifying-handling-of-tomcat-and-http-error-pages/</link>
      <pubDate>Sun, 24 Oct 2010 13:20:23 +0200</pubDate>
      <guid>http://localhost:1313/post/20101024-unifying-handling-of-tomcat-and-http-error-pages/</guid>
      <description>In configuration with a front Apache HTTPd 2.2.x server and backend Tomcat servers, you may have defined customs error page on the HTTPd configuration using ErrorDocument directive.
ErrorDocument 401 /errors/err-401.html ErrorDocument 403 /errors/err-403.html ErrorDocument 404 /errors/err-404.html ErrorDocument 500 /errors/err-500.html ``` It works well for resources handled by HTTPd but errors for contents served by Tomcat are still handled by Tomcat error mecanism.
Imagine a web application myapp, served by a Tomcat behind HTTPd, you could have the following setup.</description>
    </item>
    <item>
      <title>How to Fix HP Laserjet 1102w printerAgent Using Port 8080 on Mac ?</title>
      <link>http://localhost:1313/post/20100925-how-to-fix-hp-laserjet-1102w-printeragent-using-port-8080-on-mac/</link>
      <pubDate>Sat, 25 Sep 2010 13:20:23 +0200</pubDate>
      <guid>http://localhost:1313/post/20100925-how-to-fix-hp-laserjet-1102w-printeragent-using-port-8080-on-mac/</guid>
      <description>I recently bought a new Laser printer, a HP Laserjet 1102w. A very good printer bundled with a very rich firmware supporting WIFI Wep/WPA/WPA2, Bonjour, SNMP v1/v2, a web interface and much more. A definitive good choice but with a real problem for the Java developer.
Why ? Because HP printer agent is using the 8080 port, the default http port for Tomcat, JBoss and others servlet engines/application servers.
Of course, you could update Tomcat or JBoss default listen ports but you could also try to update the HP printerAgent default port.</description>
    </item>
    <item>
      <title>Disable Tomcat Memory Leak Detector</title>
      <link>http://localhost:1313/post/20100504-disable-tomcat-memory-leak-detector/</link>
      <pubDate>Tue, 04 May 2010 13:20:23 +0200</pubDate>
      <guid>http://localhost:1313/post/20100504-disable-tomcat-memory-leak-detector/</guid>
      <description>If you upgraded to Tomcat 6.0.26, you have seen this kind of message in your logs:
May 4, 2010 5:08:46 p.m. org.apache.catalina.loader.WebappClassLoader clearReferencesThreads SEVERE: A web application Appears To Have started a thread named [Thread-8] but Has Failed to stop it. This is very Likely to create a memory leak. Or:
May 4, 2010 3:47:09 p.m. org.apache.catalina.loader.WebappClassLoader clearReferencesJdbc SEVERE: A web application registered the JDBC driver [com.ibm.as400.access.AS400JDBCDriver] but failed to unregister it When the web application was stopped.</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/post/20110615-servlet-containers-startup-time/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/20110615-servlet-containers-startup-time/</guid>
      <description>Jul 15th, 2011
With the release of JBoss AS7, we see many comments around about the startup time of Application Servers. Even if this appears marginal in real life (an application server is expected to run 24/24 7/7), there is area where startup time is still important like for developpers. In developpment phase, when you have to start/stop your server dozens of times by day, you need fastest start time as possible.</description>
    </item>
  </channel>
</rss>
