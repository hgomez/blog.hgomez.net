[{"content":"If you’re using Gitlab, you may know you could use custom hooks to validate contents. Everything is detailed in http://doc.gitlab.com/ce/hooks/custom_hooks.html\nI found many examples where hooks are Ruby based and using Gitlab APIs but I wanted something in good old bash.\nI found some bash hooks, https://github.com/Praqma/git-hooks, but 7 months old. They still works with Gitlab 7.8.1 and adapted them for my purposes.\nHere is a sample pre-receive hook :\n#!/bin/bash # # pre-receive hook for Commit Check # COMPANY_EMAIL=\u0026#34;mycorp.org\u0026#34; readonly PROGNAME=$(basename $0) readonly PROGDIR=$(readlink -m $(dirname $0)) check_single_commit() { COMMIT_CHECK_STATUS=0 # # Put here any logic you want for your commit # # COMMIT_MESSAGE contains commit message # COMMIT_AUTHOR contains commit author (without email) # # Set COMMIT_CHECK_STATUS to non zero to indicate an error } check_all_commits() { REVISIONS=$(git rev-list $OLD_REVISION..$NEW_REVISION) IFS=\u0026#39;\\n\u0026#39; read -ra LIST_OF_REVISIONS \u0026lt;\u0026lt;\u0026lt; \u0026#34;$REVISIONS\u0026#34; for rid in \u0026#34;${!LIST_OF_REVISIONS[@]}\u0026#34;; do REVISION=${LIST_OF_REVISIONS[rid]} COMMIT_MESSAGE=$(git cat-file commit $REVISION | sed \u0026#39;1,/^$/d\u0026#39;) COMMIT_AUTHOR=$(git cat-file commit $REVISION | grep committer | sed \u0026#39;s/^.* \\([^@ ]\\+@[^ ]\\+\\) \\?.*$/\\1/\u0026#39; | sed \u0026#39;s/\u0026lt;//\u0026#39; | sed \u0026#39;s/\u0026gt;//\u0026#39; | sed \u0026#39;s/@$COMPANY_EMAIL//\u0026#39;) check_single_commit if [ \u0026#34;$COMMIT_CHECK_STATUS\u0026#34; != \u0026#34;0\u0026#34; ]; then echo \u0026#34;Commit validation failed for commit $REVISION\u0026#34; \u0026gt;\u0026amp;2 exit 1 fi done } # Get custom commit message format while read OLD_REVISION NEW_REVISION REFNAME ; do check_all_commits done exit 0 Install is easy (example with Omnibus based Gitlab) :\nmkdir /var/opt/gitlab/git-data/repositories/MYGROUP/MYREPO.git/custom_hooks cp pre-receive /var/opt/gitlab/git-data/repositories/MYGROUP/MYREPO.git/custom_hooks/pre-receive chmod 755 /var/opt/gitlab/git-data/repositories/MYGROUP/MYREPO.git/custom_hooks/pre-receive chown -R git:git /var/opt/gitlab/git-data/repositories/MYGROUP/MYREPO.git/custom_hooks ","permalink":"http://localhost:1313/post/20150302-gitlab-custom-hooks-bash-way/","summary":"If you’re using Gitlab, you may know you could use custom hooks to validate contents. Everything is detailed in http://doc.gitlab.com/ce/hooks/custom_hooks.html\nI found many examples where hooks are Ruby based and using Gitlab APIs but I wanted something in good old bash.\nI found some bash hooks, https://github.com/Praqma/git-hooks, but 7 months old. They still works with Gitlab 7.8.1 and adapted them for my purposes.\nHere is a sample pre-receive hook :","title":"Gitlab custom hooks - Bash Way"},{"content":"If you’re using CentOS/RHEL 5, 6 or 7, you have noticed bundled subversion and git are quite old. It could be a problem if you need to use smart features, like Sparse Checkout. Also Jenkins Git Plugin recommand version 1.7 or higher.\nOf course, you could recompile git from sources, but it’s better to use prebuilt packages.\nHere enter Wandisco Wandisco provides up to date Subversion RPMs for CentOS 5/6/7 :\nSubversion 1.7 for CentOS 5\nSubversion 1.8 for CentOS 5 Subversion 1.9 for CentOS 5\nSubversion 1.7 for CentOS 6\nSubversion 1.8 for CentOS 5\nSubversion 1.9 for CentOS 6\nSubversion 1.7 for CentOS 7\nSubversion 1.8 for CentOS 7\nSubversion 1.9 for CentOS 7\nBetter, they also offer quite fresh Git RPMs too :\nGit for CentOS 5 - 2.2.0 Git for CentOS 6 - 2.2.1 Git for CentOS 7 - 2.1.0 You could download RPM and install it but better is to add Wandisco repository to yum repositories :\nExample to use Wandisco Git on CentOS/RHEL 6 :\n#Wandisco-Git.repo [wandisco-Git] name=CentOS-6 - Wandisco Git baseurl=http://opensource.wandisco.com/centos/6/git/$basearch/ enabled=1 gpgcheck=1 gpgkey=http://opensource.wandisco.com/RPM-GPG-KEY-WANdisco Example to use Wandisco Subversion 1.9 on CentOS/RHEL 5 :\n#Wandisco-SVN-1.9.repo [wandisco-Subversion-1.9] name=CentOS-5 - Wandisco Subversion 1.9 baseurl=http://opensource.wandisco.com/centos/5/svn-1.9/RPMS/$basearch/ enabled=1 gpgcheck=1 gpgkey=http://opensource.wandisco.com/RPM-GPG-KEY-WANdisco Save the earth, reduce your CO2 impact, and stick on prebuilt-native packages :)\n","permalink":"http://localhost:1313/post/20150226-centos-and-rhel-and-up-to-date-subversion-and-git/","summary":"If you’re using CentOS/RHEL 5, 6 or 7, you have noticed bundled subversion and git are quite old. It could be a problem if you need to use smart features, like Sparse Checkout. Also Jenkins Git Plugin recommand version 1.7 or higher.\nOf course, you could recompile git from sources, but it’s better to use prebuilt packages.\nHere enter Wandisco Wandisco provides up to date Subversion RPMs for CentOS 5/6/7 :","title":"CentOS \u0026 RHEL and up to date Subversion and Git"},{"content":"While rebuilding archiva RPM package, I noticed some openSUSE systems to complains about invalid jar file for activation-1.1.1.jar\nhttp://central.maven.org/maven2/javax/activation/activation/1.1.1/activation-1.1.1.jar Unzip indicate an error :\nunzip -t activation-1.1.1.jar Archive: activation-1.1.1.jar testing: META-INF/ bad extra-field entry: EF block length (0 bytes) invalid (\u0026lt; 4) testing: META-INF/MANIFEST.MF OK Same for zip\nzip -T activation-1.1.1.jar META-INF/ bad extra-field entry: EF block length (0 bytes) invalid (\u0026lt; 4) test of activation-1.1.1.jar FAILED zip error: Zip file invalid, could not spawn unzip, or wrong unzip (original files unmodified) It seems related to CVE-2014-8139, referenced by RH for example :\nhttps://bugzilla.redhat.com/show_bug.cgi?id=CVE-2014-8139\nunzip/zip protection patch seems incorrect and not applied everywhere, for example Mint 17.1 didn’t complain.\nIf you’re using zip/unzip to check jar consistency, take care that some jars could be reported as invalid whereas they are perfectly fine.\nMore and more jars/wars are reported invalid, mysql-connector-java-5.1.31.jar or gitbucket-2.8.war are reported with errors too.\n","permalink":"http://localhost:1313/post/20150224-cve-2014-8139-and-activation-1.1.1.jar/","summary":"While rebuilding archiva RPM package, I noticed some openSUSE systems to complains about invalid jar file for activation-1.1.1.jar\nhttp://central.maven.org/maven2/javax/activation/activation/1.1.1/activation-1.1.1.jar Unzip indicate an error :\nunzip -t activation-1.1.1.jar Archive: activation-1.1.1.jar testing: META-INF/ bad extra-field entry: EF block length (0 bytes) invalid (\u0026lt; 4) testing: META-INF/MANIFEST.MF OK Same for zip\nzip -T activation-1.1.1.jar META-INF/ bad extra-field entry: EF block length (0 bytes) invalid (\u0026lt; 4) test of activation-1.1.1.jar FAILED zip error: Zip file invalid, could not spawn unzip, or wrong unzip (original files unmodified) It seems related to CVE-2014-8139, referenced by RH for example :","title":"CVE-2014-8139 and activation-1.1.1.jar"},{"content":"If you upgraded from VirtualBox 4.3.20 to 4.3.22 and use Vbox network shares, you may have noticed shares are reported as unmounted, even if they are available.\nThis is a well known issue :\nhttps://forums.virtualbox.org/viewtopic.php?f=2\u0026amp;t=66081 https://forums.virtualbox.org/viewtopic.php?f=1\u0026amp;t=66067#p312765\nSolution for now is to revert to 4.3.20 (VB and extension) or wait for upcoming VirtualBox release\n","permalink":"http://localhost:1313/post/20150223-virtualbox-4.3.22-and-network-drives/","summary":"If you upgraded from VirtualBox 4.3.20 to 4.3.22 and use Vbox network shares, you may have noticed shares are reported as unmounted, even if they are available.\nThis is a well known issue :\nhttps://forums.virtualbox.org/viewtopic.php?f=2\u0026amp;t=66081 https://forums.virtualbox.org/viewtopic.php?f=1\u0026amp;t=66067#p312765\nSolution for now is to revert to 4.3.20 (VB and extension) or wait for upcoming VirtualBox release","title":"VirtualBox 4.3.22 and network drives"},{"content":"Mountain Lion came with a version of apxs where C compiler and pre-processor are defined to a location not in phase with XCode 4.5.\nIf you try to build any apxs related modules or Tomcat Native Library, it will fail like this :\nchecking build system type... x86_64-apple-darwin12.2.0 checking host system type... x86_64-apple-darwin12.2.0 checking target system type... x86_64-apple-darwin12.2.0 checking for a BSD-compatible install... /usr/bin/install -c checking for working mkdir -p... yes Tomcat Native Version: 1.1.24 checking for chosen layout... tcnative checking for APR... yes setting CC to \u0026#34;/Applications/Xcode.app/Contents/Developer/Toolchains/OSX10.8.xctoolchain/usr/bin/cc\u0026#34; setting CPP to \u0026#34;/Applications/Xcode.app/Contents/Developer/Toolchains/OSX10.8.xctoolchain/usr/bin/cc -E\u0026#34; checking for JDK location (please wait)... /System/Library/Frameworks/JavaVM.framework/Versions/A/ checking Java platform... checking Java platform... checking for sablevm... NONE adding \u0026#34;-I/System/Library/Frameworks/JavaVM.framework/Versions/A//Headers\u0026#34; to TCNATIVE_PRIV_INCLUDES checking os_type directory... jni_md.h found in /System/Library/Frameworks/JavaVM.framework/Versions/A//Headers checking for gcc... /Applications/Xcode.app/Contents/Developer/Toolchains/OSX10.8.xctoolchain/usr/bin/cc checking whether the C compiler works... no configure: error: in `/Users/henri/tomcat-native-1.1.24-src/jni/native\u0026#39;: configure: error: C compiler cannot create executables See `config.log\u0026#39; for more details apxs get its configurations from /usr/share/httpd/build/config_vars.mk who reference /Applications/Xcode.app/Contents/Developer/Toolchains/OSX10.8.xctoolchain.\nCC = /Applications/Xcode.app/Contents/Developer/Toolchains/OSX10.8.xctoolchain/usr/bin/cc CPP = /Applications/Xcode.app/Contents/Developer/Toolchains/OSX10.8.xctoolchain/usr/bin/cc -E If you installed XCode to standard location, you’ll find toolchain at /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain.\nSo until Apple fix apxs, you should create a symlink between real and expected location :\nsudo ln -s /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain /Applications/Xcode.app/Contents/Developer/Toolchains/OSX10.8.xctoolchain Configure will now works as expected :\nmbp-rico:native henri$ CFLAGS=\u0026#39;-arch i386 -arch x86_64\u0026#39; ./configure --with-apr=/usr --with-ssl=/usr --with-java-home=/System/Library/Frameworks/JavaVM.framework/Versions/A/ checking build system type... x86_64-apple-darwin12.2.0 checking host system type... x86_64-apple-darwin12.2.0 checking target system type... x86_64-apple-darwin12.2.0 checking for a BSD-compatible install... /usr/bin/install -c checking for working mkdir -p... yes Tomcat Native Version: 1.1.24 checking for chosen layout... tcnative checking for APR... yes setting CC to \u0026#34;/Applications/Xcode.app/Contents/Developer/Toolchains/OSX10.8.xctoolchain/usr/bin/cc\u0026#34; setting CPP to \u0026#34;/Applications/Xcode.app/Contents/Developer/Toolchains/OSX10.8.xctoolchain/usr/bin/cc -E\u0026#34; checking for JDK location (please wait)... /System/Library/Frameworks/JavaVM.framework/Versions/A/ checking Java platform... checking Java platform... checking for sablevm... NONE adding \u0026#34;-I/System/Library/Frameworks/JavaVM.framework/Versions/A//Headers\u0026#34; to TCNATIVE_PRIV_INCLUDES checking os_type directory... jni_md.h found in /System/Library/Frameworks/JavaVM.framework/Versions/A//Headers checking for gcc... /Applications/Xcode.app/Contents/Developer/Toolchains/OSX10.8.xctoolchain/usr/bin/cc checking whether the C compiler works... yes checking for C compiler default output file name... a.out checking for suffix of executables... checking whether we are cross compiling... no checking for suffix of object files... o checking whether we are using the GNU C compiler... yes checking whether /Applications/Xcode.app/Contents/Developer/Toolchains/OSX10.8.xctoolchain/usr/bin/cc accepts -g... yes checking for /Applications/Xcode.app/Contents/Developer/Toolchains/OSX10.8.xctoolchain/usr/bin/cc option to accept ISO C89... none needed checking for OpenSSL library... using openssl from /usr/lib and /usr/include checking OpenSSL library version... ok checking for OpenSSL DSA support... yes setting TCNATIVE_LDFLAGS to \u0026#34;-lssl -lcrypto\u0026#34; adding \u0026#34;-DHAVE_OPENSSL\u0026#34; to CFLAGS setting TCNATIVE_LIBS to \u0026#34;\u0026#34; setting TCNATIVE_LIBS to \u0026#34; -L/usr/lib -R/usr/lib -lapr-1 -lpthread\u0026#34; configure: creating ./config.status config.status: creating tcnative.pc config.status: creating Makefile config.status: executing default commands Thanks stack-exchange for covering this issue\n","permalink":"http://localhost:1313/post/20121015-mountain-lion-and-apxs/index.md/","summary":"Mountain Lion came with a version of apxs where C compiler and pre-processor are defined to a location not in phase with XCode 4.5.\nIf you try to build any apxs related modules or Tomcat Native Library, it will fail like this :\nchecking build system type... x86_64-apple-darwin12.2.0 checking host system type... x86_64-apple-darwin12.2.0 checking target system type... x86_64-apple-darwin12.2.0 checking for a BSD-compatible install... /usr/bin/install -c checking for working mkdir -p... yes Tomcat Native Version: 1.","title":"Mountain Lion and Apxs"},{"content":"Java on OSX OSX is a good platform for Java development but also running Java applications. Sadly XServe servers are no more available but in many cases Mac Mini could to pretty good works as Java server applications.\nFor a long time, OSX Java was maintained by Apple, from Sun Hotspot and was often a bit late vs Windows/Linux releases.\nWith Lion, Apple announced that they won’t produce Java for their futures OS, starting with Mountain Lion (10.8) and Oracle will do the job as they did for major distributions.\nOpenJDK project included OSX support more than one year ago and there is now a very good coverage of Java for OSX.\nIt take some time to see first official Java 7 from Oracle on OSX, for Lion only, but there was community alternatives like openjdk-osx-build, where you could find a large choice of OpenJDK for OSX (7, 8, 8 with Lambda, 8 with Jigsaw).\nIf you install Java’s from Oracle or openjdk-osx-build, you may want to know how to select one of them for your application and even select a specific one for some of your applications.\nJava Preferences Apple provide a good tool to select default JVM, Java Preferences :\nIn this screenshot you could see many JVM, from many sources, Apple, Oracle and openjdk-osx-build and default ordering Java (from up to bottom).\nHere you’ll see that default JVM will be Apple Java 1.6.0_33-b03-424 in 64bits, next choice will be Apple Java 1.6.0_33-b03-424 in 32bits. You will notice these JVM are marked as System, more on this later.\nNext you’ll find Apple Java 1.6.0_31 in 64 and 32 bits and then Java 1.7 (1.7.0-jdk7u6-b20-20120719) from openjdk-osx-build. By the end you’ll find latest official Oracle Java 7, aka 1.7.0_05.\nWhat does it means for you in a command line mode, console is just mandatory for any serious OSX geek ?\nLet see java used by default :\nmbp-rico:~ henri$ java -version java version \u0026#34;1.6.0_33\u0026#34; Java(TM) SE Runtime Environment (build 1.6.0_33-b03-424-11M3720) Java HotSpot(TM) 64-Bit Server VM (build 20.8-b03-424, mixed mode) Default Java is Apple 1.6.0_33, 64bits as expected, so far so good.\nWhat should i do if I want to select instead Java 7 ?\nStandard Unix way You could just update your PATH environment variable to update search path :\nmbp-rico:~ henri$ export PATH=/Library/Java/JavaVirtualMachines/1.7.0u6.jdk/Contents/Home/bin:$PATH mbp-rico:~ henri$ java -version openjdk version \u0026#34;1.7.0-jdk7u6-b20\u0026#34; OpenJDK Runtime Environment (build 1.7.0-jdk7u6-b20-20120719) OpenJDK 64-Bit Server VM (build 23.2-b09, mixed mode) It works but OSX provide smarter mechanism.\nOSX way Keeping in mind we’re discussing command line operation, updating default JVM via Java Preferences will not be retained, will define instead JAVA_HOME environment variable like this :\nmbp-rico:~ henri$ export JAVA_HOME=/Library/Java/JavaVirtualMachines/1.7.0u6.jdk/Contents/Home/ mbp-rico:~ henri$ java -version openjdk version \u0026#34;1.7.0-jdk7u6-b20\u0026#34; OpenJDK Runtime Environment (build 1.7.0-jdk7u6-b20-20120719) OpenJDK 64-Bit Server VM (build 23.2-b09, mixed mode) We could keep our current PATH and it will be Apple java bootstrap system, living into /usr/bin/java who make use of JAVA_HOME and launch the proper JVM. Simple but efficient .\njava_home As we see previously, Java Preferences define an order of preferred JVM on OSX, like alternatives does on many Linux systems, especially those using JPackage tooling. So there should be a way to get access to these preferences and here entering java_home\njava_home is located in /usr/libexec and has many useful features :\nmbp-rico:~ henri$ /usr/libexec/java_home --help Usage: java_home [options...] Returns the path to a Java home directory from the current user\u0026#39;s settings. Options: [-v/--version \u0026lt;version\u0026gt;] Filter Java versions in the \u0026#34;JVMVersion\u0026#34; form 1.X(+ or *). [-a/--arch \u0026lt;architecture\u0026gt;] Filter JVMs matching architecture (i386, x86_64, etc). [-d/--datamodel \u0026lt;datamodel\u0026gt;] Filter JVMs capable of -d32 or -d64 [-t/--task \u0026lt;task\u0026gt;] Use the JVM list for a specific task (Applets, WebStart, BundledApp, JNI, or CommandLine) [-F/--failfast] Fail when filters return no JVMs, do not continue with default. [ --exec \u0026lt;command\u0026gt; ...] Execute the $JAVA_HOME/bin/\u0026lt;command\u0026gt; with the remaining arguments. [-R/--request] Request installation of a Java Runtime if not installed. [-X/--xml] Print full JVM list and additional data as XML plist. [-V/--verbose] Print full JVM list with architectures. [-h/--help] This usage information. Let’s play with java_home now.\nObtaining path of default JVM :\nmbp-rico:~ henri$ /usr/libexec/java_home /System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home Obtaining path of default Java 7 JVM :\nmbp-rico:~ henri$ /usr/libexec/java_home -v 1.7 /Library/Java/JavaVirtualMachines/1.7.0u6.jdk/Contents/Home Obtaining path of default Java 8 JVM :\nmbp-rico:~ henri$ /usr/libexec/java_home -v 1.8 /Library/Java/JavaVirtualMachines/1.8.0.jdk/Contents/Home Obtaining path of default Java 1.6 32 bits JVM :\n12 \u0026lt;br\u0026gt;mbp-rico:~ henri$ /usr/libexec/java_home -v 1.6 -a i386\u0026lt;br\u0026gt;/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home\u0026lt;br\u0026gt; Obtaining path of default Java 1.6 64 bits JVM :\nmbp-rico:~ henri$ /usr/libexec/java_home -v 1.6 -a x86_64 /System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home Here you could see that 32 and 64bits JVM have the same path. This is because due to universal mode (i386/x86_64), Apple produce a dual mode JVM. This is not the case for Oracle Java 7 where only 64bits JVM is available.\nLet’s combine java_home and JAVA_HOME :\nmbp-rico:~ henri$ export JAVA_HOME=`/usr/libexec/java_home -v 1.7` mbp-rico:~ henri$ java -version openjdk version \u0026#34;1.7.0-jdk7u6-b20\u0026#34; OpenJDK Runtime Environment (build 1.7.0-jdk7u6-b20-20120719) OpenJDK 64-Bit Server VM (build 23.2-b09, mixed mode) This is a very nice features if you want to specify a Java Level (6 or 7) following your Java Preferences for some of your server side application (let say Apache Tomcat) or command operation (like Apache Maven).\nTypically for my Apache Tomcat powered application like Jenkins, I usually set it in bin/setenv.sh :\nexport JAVA_HOME=`/usr/libexec/java_home -v 1.7` CATALINA_OPTS=-Xms256m -Xmx512m -DJENKINS_HOME=$JENKINS_HOME -Dhudson.model.Hudson.logStartupPerformance=true -Duser.language=en -Djava.awt.headless=true Do you want to get a list of all JVM on your system ?\nmbp-rico:~ henri$ /usr/libexec/java_home -V Matching Java Virtual Machines (33): 1.6.0_33-b03-424, x86_64: \u0026#34;Java SE 6\u0026#34; /System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home 1.6.0_33-b03-424, i386: \u0026#34;Java SE 6\u0026#34; /System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home 1.6.0_31-b04-411, x86_64: \u0026#34;Java SE 6\u0026#34; /Library/Java/JavaVirtualMachines/1.6.0_31-b04-411.jdk/Contents/Home 1.6.0_31-b04-411, i386: \u0026#34;Java SE 6\u0026#34; /Library/Java/JavaVirtualMachines/1.6.0_31-b04-411.jdk/Contents/Home 1.7.0-jdk7u6-b20-20120719, x86_64: \u0026#34;OpenJDK 7\u0026#34; /Library/Java/JavaVirtualMachines/1.7.0u6.jdk/Contents/Home 1.8.0-jdk8-b47-20120720, x86_64: \u0026#34;OpenJDK 8\u0026#34; /Library/Java/JavaVirtualMachines/1.8.0.jdk/Contents/Home 1.7.0-jdk7u4-b21-20120427, i386: \u0026#34;OpenJDK 7\u0026#34; /Library/Java/JavaVirtualMachines/1.7.0u4.jdk/Contents/Home 1.7.0_05, x86_64: \u0026#34;Java SE 7\u0026#34; /Library/Java/JavaVirtualMachines/1.7.0.jdk/Contents/Home 1.6.0_33-b03-424, x86_64: \u0026#34;Java SE 6\u0026#34; /Library/Java/JavaVirtualMachines/1.6.0_33-b03-424.jdk/Contents/Home 1.6.0_33-b03-424, i386: \u0026#34;Java SE 6\u0026#34; /Library/Java/JavaVirtualMachines/1.6.0_33-b03-424.jdk/Contents/Home 1.8.0-jdk8-b45-20120713-jigsaw, x86_64: \u0026#34;OpenJDK 8\u0026#34; /Library/Java/JavaVirtualMachines/1.8.0-jigsaw.jdk/Contents/Home 1.8.0-b48-20120720-lambda, x86_64: \u0026#34;OpenJDK 8\u0026#34; /Library/Java/JavaVirtualMachines/1.8.0-lambda.jdk/Contents/Home 1.7.0-jdk7u6-b20-20120719, i386: \u0026#34;OpenJDK 7\u0026#34; /Library/Java/JavaVirtualMachines/1.7.0u6.jdk/Contents/Home 1.7.0-jdk7u4-b21-20120427, x86_64: \u0026#34;OpenJDK 7\u0026#34; /Library/Java/JavaVirtualMachines/1.7.0u4.jdk/Contents/Home 1.7.0-jdk7u4-b21-20120421, x86_64: \u0026#34;OpenJDK 7\u0026#34; /Library/Java/JavaVirtualMachines/1.7.0u4-64.jdk/Contents/Home 1.7.0, x86_64: \u0026#34;OpenJDK 7\u0026#34; /Library/Java/JavaVirtualMachines/1.7.0u.jdk/Contents/Home 1.7.0, i386: \u0026#34;OpenJDK 7\u0026#34; /Library/Java/JavaVirtualMachines/1.7.0u.jdk/Contents/Home 1.6.0_32-b05-420, x86_64: \u0026#34;Java SE 6\u0026#34; /Library/Java/JavaVirtualMachines/1.6.0_32-b05-420.jdk/Contents/Home 1.6.0_32-b05-420, i386: \u0026#34;Java SE 6\u0026#34; /Library/Java/JavaVirtualMachines/1.6.0_32-b05-420.jdk/Contents/Home 1.6.0_32-b05-417, x86_64: \u0026#34;Java SE 6\u0026#34; /Library/Java/JavaVirtualMachines/1.6.0_32-b05-417.jdk/Contents/Home 1.6.0_32-b05-417, i386: \u0026#34;Java SE 6\u0026#34; /Library/Java/JavaVirtualMachines/1.6.0_32-b05-417.jdk/Contents/Home 1.6.0_31-b04-413, x86_64: \u0026#34;Java SE 6\u0026#34; /Library/Java/JavaVirtualMachines/1.6.0_31-b04-413.jdk/Contents/Home 1.6.0_31-b04-413, i386: \u0026#34;Java SE 6\u0026#34; /Library/Java/JavaVirtualMachines/1.6.0_31-b04-413.jdk/Contents/Home 1.6.0_30-b12-409, x86_64: \u0026#34;Java SE 6\u0026#34; /Library/Java/JavaVirtualMachines/1.6.0_30-b12-409.jdk/Contents/Home 1.6.0_30-b12-409, i386: \u0026#34;Java SE 6\u0026#34; /Library/Java/JavaVirtualMachines/1.6.0_30-b12-409.jdk/Contents/Home 1.6.0_30-b12-404, x86_64: \u0026#34;Java SE 6\u0026#34; /Library/Java/JavaVirtualMachines/1.6.0_30-b12-404.jdk/Contents/Home 1.6.0_30-b12-404, i386: \u0026#34;Java SE 6\u0026#34; /Library/Java/JavaVirtualMachines/1.6.0_30-b12-404.jdk/Contents/Home 1.6.0_29-b11-397, x86_64: \u0026#34;Java SE 6\u0026#34; /Library/Java/JavaVirtualMachines/1.6.0_29-b11-397.jdk/Contents/Home 1.6.0_29-b11-397, i386: \u0026#34;Java SE 6\u0026#34; /Library/Java/JavaVirtualMachines/1.6.0_29-b11-397.jdk/Contents/Home 1.6.0_27-b07-395, x86_64: \u0026#34;Java SE 6\u0026#34; /Library/Java/JavaVirtualMachines/1.6.0_27-b07-395.jdk/Contents/Home 1.6.0_27-b07-395, i386: \u0026#34;Java SE 6\u0026#34; /Library/Java/JavaVirtualMachines/1.6.0_27-b07-395.jdk/Contents/Home 1.6.0_26-b03-383, x86_64: \u0026#34;Java SE 6\u0026#34; /Library/Java/JavaVirtualMachines/1.6.0_26-b03-383.jdk/Contents/Home 1.6.0_26-b03-383, i386: \u0026#34;Java SE 6\u0026#34; /Library/Java/JavaVirtualMachines/1.6.0_26-b03-383.jdk/Contents/Home /System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home Note on JVM Locations You may have noticed many differents paths for JVM :\n/System/Library/Java/JavaVirtualMachines is where Apple install System JVM. Here you could have only one JVM by family, ie 1.6, 1.7. These JVM will be available to all users on system.\n/Library/Java/JavaVirtualMachines is a slot location for guest JVMs, specially designed to host contributors JVM like Oracle, openjdk-osx-build or Apple Developper Preview JVMs Also, these JVM will be available to all users on system.\n/Users/bill/Library/Java/JavaVirtualMachines is a slot for contributor JVMs but only available to user bill.\nTo conclude OSX is probably the platform with the more choice of Java to run and experiment, Java 6, Java 7, OpenJDK 7, 8, Lambda, Jigsaw.\nAnd with its /usr/libexec/java_home and JAVA_HOME environment variable, you could select any of them for your console or command mode operations very easily.\nEnjoy Java on OSX !\n","permalink":"http://localhost:1313/post/20120720-understanding-java-from-command-line-on-osx/","summary":"Java on OSX OSX is a good platform for Java development but also running Java applications. Sadly XServe servers are no more available but in many cases Mac Mini could to pretty good works as Java server applications.\nFor a long time, OSX Java was maintained by Apple, from Sun Hotspot and was often a bit late vs Windows/Linux releases.\nWith Lion, Apple announced that they won’t produce Java for their futures OS, starting with Mountain Lion (10.","title":"Understanding Java From Command Line on OSX"},{"content":"Updated build process for tomcat-connector, 1.1.24, no more APXS variable or configure parameters required\nTCN_RELEASE=1.1.24 curl http://mir2.ovh.net/ftp.apache.org/dist//tomcat/tomcat-connectors/native/$TCN_RELEASE/source/tomcat-native-$TCN_RELEASE-src.tar.gz -o tomcat-native-$TCN_RELEASE-src.tar.gz tar xvzf tomcat-native-$TCN_RELEASE-src.tar.gz cd tomcat-native-$TCN_RELEASE-src/jni/native CFLAGS=\u0026#39;-arch i386 -arch x86_64\u0026#39; APXSLDFLAGS=\u0026#39;-arch i386 -arch x86_64\u0026#39; ./configure --with-apr=/usr --with-ssl=/usr --with-java-home=/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home make clean make sudo cp .libs/libtcnative-1.0.1.24.dylib /usr/lib/java sudo rm -f /usr/lib/java/libtcnative-1.dylib sudo ln -s /usr/lib/java/libtcnative-1.0.1.24.dylib /usr/lib/java/libtcnative-1.dylib A note about Lion If you get Java on Lion using the java command on terminal or via the Java Developer Package for Mac OS X 10.7, Java headers are not on the usual location and you could find them under /System/Library/Frameworks/JavaVM.framework/Versions/A/Headers\nYou should then update the configure command line like this :\nCFLAGS=\u0026#39;-arch i386 -arch x86_64\u0026#39; ./configure --with-apr=/usr --with-ssl=/usr --with-java-home=/System/Library/Frameworks/JavaVM.framework/Versions/A/ TCN_RELEASE=1.1.24 curl http://mir2.ovh.net/ftp.apache.org/dist//tomcat/tomcat-connectors/native/$TCN_RELEASE/source/tomcat-native-$TCN_RELEASE-src.tar.gz -o tomcat-native-$TCN_RELEASE-src.tar.gz tar xvzf tomcat-native-$TCN_RELEASE-src.tar.gz cd tomcat-native-$TCN_RELEASE-src/jni/native CFLAGS=\u0026#39;-arch i386 -arch x86_64\u0026#39; ./configure --with-apr=/usr --with-ssl=/usr --with-java-home=/System/Library/Frameworks/JavaVM.framework/Versions/A/ make clean make sudo cp .libs/libtcnative-1.0.dylib /usr/lib/java sudo rm -f /usr/lib/java/libtcnative-1.dylib sudo ln -s /usr/lib/java/libtcnative-1.0.dylib /usr/lib/java/libtcnative-1.dylib ","permalink":"http://localhost:1313/post/20120613-building-universal-apache-tomcat-native-library-on-osx-updated/","summary":"Updated build process for tomcat-connector, 1.1.24, no more APXS variable or configure parameters required\nTCN_RELEASE=1.1.24 curl http://mir2.ovh.net/ftp.apache.org/dist//tomcat/tomcat-connectors/native/$TCN_RELEASE/source/tomcat-native-$TCN_RELEASE-src.tar.gz -o tomcat-native-$TCN_RELEASE-src.tar.gz tar xvzf tomcat-native-$TCN_RELEASE-src.tar.gz cd tomcat-native-$TCN_RELEASE-src/jni/native CFLAGS=\u0026#39;-arch i386 -arch x86_64\u0026#39; APXSLDFLAGS=\u0026#39;-arch i386 -arch x86_64\u0026#39; ./configure --with-apr=/usr --with-ssl=/usr --with-java-home=/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home make clean make sudo cp .libs/libtcnative-1.0.1.24.dylib /usr/lib/java sudo rm -f /usr/lib/java/libtcnative-1.dylib sudo ln -s /usr/lib/java/libtcnative-1.0.1.24.dylib /usr/lib/java/libtcnative-1.dylib A note about Lion If you get Java on Lion using the java command on terminal or via the Java Developer Package for Mac OS X 10.","title":"Building Universal Apache Tomcat Native Library on OSX - Updated"},{"content":"Build Universal Apache Tomcat Connector (mod_jk) for OSX follow tricks used for Apache Tomcat Native Library.\nCFLAGS=\u0026#39;-arch i386 -arch x86_64\u0026#39; APXSLDFLAGS=\u0026#39;-arch i386-arch x86_64\u0026#39; Here is a small script to do it :\n#!/bin/sh # JK_VERSION=1.2.37 curl http://mir2.ovh.net/ftp.apache.org/dist/tomcat/tomcat-connectors/jk/tomcat-connectors-${JK_VERSION}-src.tar.gz -o tomcat-connectors-${JK_VERSION}-src.tar.gz tar xvzf tomcat-connectors-${JK_VERSION}-src.tar.gz cd tomcat-connectors-${JK_VERSION}-src/native ./configure --with-apxs=/usr/sbin/apxs CFLAGS=\u0026#39;-arch i386 -arch x86_64\u0026#39; APXSLDFLAGS=\u0026#39;-arch i386-arch x86_64\u0026#39; make clean make Installation is pretty simple :\nsudo cp apache-2.0/.libs/mod_jk.so /usr/libexec/apache2/ You could then restart your Apache HTTPd server to get new mod_jk used :\nsudo /usr/sbin/apachectl restart ","permalink":"http://localhost:1313/post/20120321-building-universal-apache-tomcat-connector-mod_jk-on-osx/","summary":"Build Universal Apache Tomcat Connector (mod_jk) for OSX follow tricks used for Apache Tomcat Native Library.\nCFLAGS=\u0026#39;-arch i386 -arch x86_64\u0026#39; APXSLDFLAGS=\u0026#39;-arch i386-arch x86_64\u0026#39; Here is a small script to do it :\n#!/bin/sh # JK_VERSION=1.2.37 curl http://mir2.ovh.net/ftp.apache.org/dist/tomcat/tomcat-connectors/jk/tomcat-connectors-${JK_VERSION}-src.tar.gz -o tomcat-connectors-${JK_VERSION}-src.tar.gz tar xvzf tomcat-connectors-${JK_VERSION}-src.tar.gz cd tomcat-connectors-${JK_VERSION}-src/native ./configure --with-apxs=/usr/sbin/apxs CFLAGS=\u0026#39;-arch i386 -arch x86_64\u0026#39; APXSLDFLAGS=\u0026#39;-arch i386-arch x86_64\u0026#39; make clean make Installation is pretty simple :\nsudo cp apache-2.0/.libs/mod_jk.so /usr/libexec/apache2/ You could then restart your Apache HTTPd server to get new mod_jk used :","title":"Building Universal Apache Tomcat Connector (Mod_jk) on OSX"},{"content":"You’ll need first mod_jk installed, follow Building Guide.\nCreate /etc/apache2/other/jk.conf :\n# Load JK Module LoadModule jk_module libexec/apache2/mod_jk.so # JK workers.properties JkWorkersFile /etc/apache2/other/workers.properties # JK shared memory location JkShmFile /var/log/apache2/mod_jk.shm # JK logs JkLogFile /var/log/apache2/mod_jk.log # JK log level [debug/error/info] JkLogLevel info # JK timestamp log format JkLogStampFormat \u0026#34;[%a %b %d %H:%M:%S %Y] \u0026#34; Create /etc/apache2/other/workers.properties\nworker.list=jenkins,watch,manage # Set properties for worker jenkins (ajp13) worker.jenkins.type=ajp13 worker.jenkins.host=localhost worker.jenkins.port=8009 # status workers worker.watch.type=status worker.watch.read_only=true worker.watch.mount=/user/status/jk worker.manage.type=status worker.manage.mount=/admin/status/jk I choose to use VirtualName Hosting and so defined one into /etc/apache2/extra/httpd-vhosts.conf :\nNameVirtualHost *:80 \u0026lt;VirtualHost *:80\u0026gt; ServerName mbpbuilder.hgomez.net ServerAlias mbpbuilder ServerAdmin webmaster@mbpbuilder.hgomez.net ErrorLog \u0026#34;/var/log/apache2/mbpbuilder.org-error_log\u0026#34; CustomLog \u0026#34;/var/log/apache2/mbpbuilder-access_log\u0026#34; common JkMount /* jenkins \u0026lt;/VirtualHost\u0026gt; ","permalink":"http://localhost:1313/post/20120321-using-apache-tomcat-connector-mod_jk-on-osx/","summary":"You’ll need first mod_jk installed, follow Building Guide.\nCreate /etc/apache2/other/jk.conf :\n# Load JK Module LoadModule jk_module libexec/apache2/mod_jk.so # JK workers.properties JkWorkersFile /etc/apache2/other/workers.properties # JK shared memory location JkShmFile /var/log/apache2/mod_jk.shm # JK logs JkLogFile /var/log/apache2/mod_jk.log # JK log level [debug/error/info] JkLogLevel info # JK timestamp log format JkLogStampFormat \u0026#34;[%a %b %d %H:%M:%S %Y] \u0026#34; Create /etc/apache2/other/workers.properties\nworker.list=jenkins,watch,manage # Set properties for worker jenkins (ajp13) worker.jenkins.type=ajp13 worker.jenkins.host=localhost worker.jenkins.port=8009 # status workers worker.","title":"Using Apache Tomcat Connector (Mod_jk) on OSX"},{"content":"My MacBookPro is quite old now :\nMacBook Pro 5.1 (Late 2008) Core2Duo 2.66Ghz Under Lion, MBP appears to be sometime laggy even if I already updated it :\nReplaced original 4Gb RAM to 8Gb DDR3 (GSkill PC8500 SQ (1066 MHz), 7-7-7-20) Replaced original Hitachi 320GB/5400 RPM by a 500Gb WesternDigital Black Black 7200RPM (WD5000BEKT-75KA9T0) I run GeekBench 2.2.7 and give me a bench result of 3752 :\nBenchmark Summary Integer Score 3123 | Floating Point Score 5493 | Memory Score 2629 | Stream Score 2110 | Geekbench Score 3752 | System Information Operating System Mac OS X 10.7.3 (Build 11D50) Model MacBook Pro (Late 2008) Motherboard Apple Inc. Mac-F42D86A9 Proto Processor Intel Core 2 Duo T9550 @ 2.66 GHz 1 Processor, 2 Cores, 2 Threads Processor ID GenuineIntel Family 6 Model 23 Stepping 10 L1 Instruction Cache 32.0 KB x 2 L1 Data Cache 32.0 KB x 2 L2 Cache 6.00 MB L3 Cache 0.00 B Memory 8.00 GB 1067 MHz DDR3 BIOS Apple Inc. MBP51.88Z.007E.B06.1202061253 IOs seems to be the limiting factor, especially when I’m using VirtualBox, I feel a slow IO performances.\nTime to bench IOs There is no tools like HD Tune on OSX, so I wrote a very simple shell script to measure raw IO performances.\n#!/bin/sh COUNT=2048 echo \u0026#34;testing pseudo-IO performances - 1st Pass\u0026#34; dd if=/dev/zero of=/dev/null bs=1m count=$COUNT echo \u0026#34;testing IO write performances - 1st Pass\u0026#34; dd if=/dev/zero of=PERFTEST bs=1m count=$COUNT echo \u0026#34;testing IO read performances - 1st Pass\u0026#34; dd if=PERFTEST of=/dev/null bs=1m count=$COUNT echo \u0026#34;testing IO read performances - 2nd Pass\u0026#34; dd if=PERFTEST of=/dev/null bs=1m count=$COUNT echo \u0026#34;testing IO write performances - 2nd Pass\u0026#34; dd if=/dev/zero of=PERFTEST bs=1m count=$COUNT Results :\ntesting pseudo-IO performances - 1st Pass 2048+0 records in 2048+0 records out 2147483648 bytes transferred in 0.225590 secs (9519410157 bytes/sec) testing IO write performances - 1st Pass 2048+0 records in 2048+0 records out 2147483648 bytes transferred in 29.882202 secs (71864973 bytes/sec) testing IO read performances - 1st Pass 2048+0 records in 2048+0 records out 2147483648 bytes transferred in 0.677308 secs (3170615711 bytes/sec) testing IO read performances - 2nd Pass 2048+0 records in 2048+0 records out 2147483648 bytes transferred in 0.675835 secs (3177527036 bytes/sec) testing IO write performances - 2nd Pass 2048+0 records in 2048+0 records out 2147483648 bytes transferred in 33.203725 secs (64675986 bytes/sec) Note, I run this performance tests from a directory excluded from Spotlight indexing !\nPseudo IO performance is justing virtual IO (/dev/zero and /dev/null), so it provide max raw IO performance : 9078 MB/s\nWrite IO performance is between 61 and 68 MB/s\nRead IO performance is very high with 3023 MB/s\nI replayed script raising COUNT from 2048 to 20480 to reduce OSX ram buffer impact in Read IO performance but still get about 2000 MB/s\niStat Menu disk activity - Write Performance Conclusions WD Black Edition perform pretty well on raw sequential Read Operations\nWith its average 63 MB/s raw sequential Write Operations, WD is about 7 time slower than faster SSD like OCZ Vertex 3\nIs it time to update MBP to SSD ? Probably and my candidates are :\nCrucial M4 128GB. This SSD is reported very stable and reliable. Bonus, its firmware could be updated from Mac.\nOCZ Vertex 3 120GB. This SSD is top performer in benchmarks but Googling it reports many reliability problems.\nI’d like to get feedback from you, performing same performance testing on your Mac hardware (MBP/ SSD configurations very welcomed).\n","permalink":"http://localhost:1313/post/20120318-to-ssd-or-not-to-ssd/","summary":"My MacBookPro is quite old now :\nMacBook Pro 5.1 (Late 2008) Core2Duo 2.66Ghz Under Lion, MBP appears to be sometime laggy even if I already updated it :\nReplaced original 4Gb RAM to 8Gb DDR3 (GSkill PC8500 SQ (1066 MHz), 7-7-7-20) Replaced original Hitachi 320GB/5400 RPM by a 500Gb WesternDigital Black Black 7200RPM (WD5000BEKT-75KA9T0) I run GeekBench 2.2.7 and give me a bench result of 3752 :\nBenchmark Summary Integer Score 3123 | Floating Point Score 5493 | Memory Score 2629 | Stream Score 2110 | Geekbench Score 3752 | System Information Operating System Mac OS X 10.","title":"To SSD or Not To SSD"},{"content":"Here is the second try of logos for DevOps, still provided by Sabrina (@saabpii). She carefully tracked comments here and on Twitter :\nPlease vote for your preferred one.\n","permalink":"http://localhost:1313/post/20120220-devops-logo-2nd-try/","summary":"Here is the second try of logos for DevOps, still provided by Sabrina (@saabpii). She carefully tracked comments here and on Twitter :\nPlease vote for your preferred one.","title":"DevOps Logo - 2nd Try"},{"content":"I asked some times ago Sabrina Perrin (@saabpii) a great graphic designer I worked with for years, if she could try to works on some DevOps logo.\nAs expected she has been very motivated and inspired.\nHere are the results :\nNow I need you to comments and votes for them.\nAll of this artwork is free to use, just mention Sabrina somewhere on your sites/blogs/presentations.\nThanks again Sabrina !\n","permalink":"http://localhost:1313/post/20120208-devops-logos/","summary":"I asked some times ago Sabrina Perrin (@saabpii) a great graphic designer I worked with for years, if she could try to works on some DevOps logo.\nAs expected she has been very motivated and inspired.\nHere are the results :\nNow I need you to comments and votes for them.\nAll of this artwork is free to use, just mention Sabrina somewhere on your sites/blogs/presentations.\nThanks again Sabrina !","title":"DevOps Logo"},{"content":"If you installed MacFuse on Lion (10.7) and tried to uninstall you may encountered the following error :\nsudo /Library/Filesystems/fusefs.fs/Support/uninstall-macfuse-core.sh MacFUSE Uninstaller: Can not find the Archive.bom for MacFUSE Core package. Uninstaller didn’t check for Lion (uname -r reporting 11.x). So fix is easy, just edit uninstaller script /Library/Filesystems/fusefs.fs/Support/uninstall-macfuse-core.sh and add 11_) in case next to 10_)\n... OS_RELEASE=`/usr/bin/uname -r` case \u0026#34;$OS_RELEASE\u0026#34; in 8*) log \u0026#34;Incorrect uninstall. Use the Tiger version please.\u0026#34; exit 1 ;; 9*) PACKAGE_RECEIPT=\u0026#34;$INSTALL_VOLUME/Library/Receipts/MacFUSE Core.pkg\u0026#34; OUTER_PACKAGE_RECEIPT=\u0026#34;$INSTALL_VOLUME/Library/Receipts/MacFUSE.pkg\u0026#34; BOMFILE=\u0026#34;$PACKAGE_RECEIPT/Contents/Archive.bom\u0026#34; ;; 10*|11*) PACKAGE_RECEIPT=\u0026#34;\u0026#34; BOMFILE=\u0026#34;$INSTALL_VOLUME/var/db/receipts/com.google.macfuse.core.bom\u0026#34; ;; esac ","permalink":"http://localhost:1313/post/20120128-uninstalling-macfuse-on-lion/","summary":"If you installed MacFuse on Lion (10.7) and tried to uninstall you may encountered the following error :\nsudo /Library/Filesystems/fusefs.fs/Support/uninstall-macfuse-core.sh MacFUSE Uninstaller: Can not find the Archive.bom for MacFUSE Core package. Uninstaller didn’t check for Lion (uname -r reporting 11.x). So fix is easy, just edit uninstaller script /Library/Filesystems/fusefs.fs/Support/uninstall-macfuse-core.sh and add 11_) in case next to 10_)\n... OS_RELEASE=`/usr/bin/uname -r` case \u0026#34;$OS_RELEASE\u0026#34; in 8*) log \u0026#34;Incorrect uninstall. Use the Tiger version please.","title":"Uninstalling MacFuse on Lion"},{"content":"I’m using Jenkins to build RPMs with free-style scripts.\nDecent RPM packager should sign his RPMs so they could be checked by yum/zypper tools.\nHere you could be in trouble since rpm signing require a password to be passed in command line :\nrpm --addsign -D \u0026#34;_signature gpg\u0026#34; -D \u0026#34;_gpg_name packagers@myforge.org\u0026#34; RPMS/noarch/myjenkins-1.0.0-1.noarch.rpm\u0026lt;br /\u0026gt; Enter pass phrase:\u0026lt;br /\u0026gt; It’s quite problematic for a RPM build factory.\nAfter digging around Internet, best solution appears to be using expect and I developped a simple script for such purpose with following constraints :\npackager gpg name should be parametized (to avoid injecting it in ~/.rpmmacros)\ngpg passphrase should be provided to command line (could be read from a secret file)\n#!/usr/bin/expect -f # # rpmsign-batch.expect : expect powered rpm signing command # proc usage {} { send_user \u0026#34;Usage: rpmsign-batch.expect gpgname passphrase rpmfile\\n\\n\u0026#34; exit } if {[llength $argv]!=3} usage set gpgname [lrange $argv 0 0] set passphrase [lrange $argv 1 1] set rpmfile [lrange $argv 2 2] send_user \u0026#34;passphrase=$passphrase gpgname=$gpgname\\n\u0026#34; spawn rpm --addsign -D \u0026#34;_signature gpg\u0026#34; -D \u0026#34;_gpg_name $gpgname\u0026#34; $rpmfile expect -exact \u0026#34;Enter pass phrase: \u0026#34; send -- \u0026#34;$passphrase\\r\u0026#34; expect eof You could then use it to sign rpms from your freestyle jobs like :\n# Password provided in clear in job (weird) rpmsign-batch.expect packagers@myforge.org mypassphrase RPMS/noarch/myjenkins-1.0.0-1.noarch.rpm # Password grabbed from a secret file (better) PASSPHRASE=`cat /my/secret-passphrase-file` rpmsign-batch.expect packagers@myforge.org $PASSPHRASE RPMS/noarch/myjenkins-1.0.0-1.noarch.rpm ","permalink":"http://localhost:1313/post/20111228-batch-rpm-signing/","summary":"I’m using Jenkins to build RPMs with free-style scripts.\nDecent RPM packager should sign his RPMs so they could be checked by yum/zypper tools.\nHere you could be in trouble since rpm signing require a password to be passed in command line :\nrpm --addsign -D \u0026#34;_signature gpg\u0026#34; -D \u0026#34;_gpg_name packagers@myforge.org\u0026#34; RPMS/noarch/myjenkins-1.0.0-1.noarch.rpm\u0026lt;br /\u0026gt; Enter pass phrase:\u0026lt;br /\u0026gt; It’s quite problematic for a RPM build factory.\nAfter digging around Internet, best solution appears to be using expect and I developped a simple script for such purpose with following constraints :","title":"Batch Rpm Signing"},{"content":"Iozone is a great tool to mesure performance of filesystem. You could find 10 examples here.\nIn it latest version, 3.97, it came with reporting tools, report.pl and gengnuplot.sh, who use gnuplot to render images. Due to changes in GnuPlot 4.x, report.pl and gnu3d.dem need to be updated to works. Also you may get only 8 metrics in reports instead of 15 expected in latest release of report.pl\ngnu3d.dem # # $Id: 3D plot of performance # # Processes files that were created by Generate_Graphs # and displays the results. Also, saves a postscript copy. # # Don Capps set terminal x11 set title \u0026#34;Iozone performance\u0026#34; set grid lt 2 lw 1 set surface set parametric set xtics set ytics set logscale x 2 set logscale y 2 set autoscale z #set xrange [2.**5:2.**24] set xlabel \u0026#34;File size in 2^n KBytes\u0026#34; set ylabel \u0026#34;Record size in 2^n Kbytes\u0026#34; set zlabel \u0026#34;Kbytes/sec\u0026#34; #set data style lines set style data lines set dgrid3d 80,80,3 splot \u0026#39;write/iozone_gen_out.gnuplot\u0026#39; title \u0026#34;Write performance\u0026#34; pause -1 \u0026#34;Hit return to continue\u0026#34; set terminal postscript color set output \u0026#34;write/write.ps\u0026#34; splot \u0026#39;write/iozone_gen_out.gnuplot\u0026#39; title \u0026#34;Write performance\u0026#34; set terminal x11 set title \u0026#34;Iozone performance\u0026#34; set grid lt 2 lw 1 set surface set xtics set ytics set logscale x 2 set logscale y 2 set autoscale z #set xrange [2.**5:2.**24] set xlabel \u0026#34;File size in 2^n KBytes\u0026#34; set ylabel \u0026#34;Record size in 2^n Kbytes\u0026#34; set zlabel \u0026#34;Kbytes/sec\u0026#34; #set data style lines set style data lines set dgrid3d 80,80,3 splot \u0026#39;rewrite/iozone_gen_out.gnuplot\u0026#39; using 1:2:3 title \u0026#34;ReWrite performance\u0026#34; with lines pause -1 \u0026#34;Hit return to continue\u0026#34; set terminal postscript color set output \u0026#34;rewrite/rewrite.ps\u0026#34; splot \u0026#39;rewrite/iozone_gen_out.gnuplot\u0026#39; using 1:2:3 title \u0026#34;ReWrite performance\u0026#34; with lines set terminal x11 set title \u0026#34;Iozone performance\u0026#34; set grid lt 2 lw 1 set surface set xtics set ytics set logscale x 2 set logscale y 2 set autoscale z #set xrange [2.**5:2.**24] set xlabel \u0026#34;File size in 2^n KBytes\u0026#34; set ylabel \u0026#34;Record size in 2^n Kbytes\u0026#34; set zlabel \u0026#34;Kbytes/sec\u0026#34; #set data style lines set style data lines set dgrid3d 80,80,3 splot \u0026#39;read/iozone_gen_out.gnuplot\u0026#39; using 1:2:3 title \u0026#34;Read performance\u0026#34; with lines pause -1 \u0026#34;Hit return to continue\u0026#34; set terminal postscript color set output \u0026#34;read/read.ps\u0026#34; splot \u0026#39;read/iozone_gen_out.gnuplot\u0026#39; using 1:2:3 title \u0026#34;Read performance\u0026#34; with lines set terminal x11 set title \u0026#34;Iozone performance\u0026#34; set grid lt 2 lw 1 set surface set xtics set ytics set logscale x 2 set logscale y 2 set autoscale z #set xrange [2.**5:2.**24] set xlabel \u0026#34;File size in 2^n KBytes\u0026#34; set ylabel \u0026#34;Record size in 2^n Kbytes\u0026#34; set zlabel \u0026#34;Kbytes/sec\u0026#34; #set data style lines set style data lines set dgrid3d 80,80,3 splot \u0026#39;reread/iozone_gen_out.gnuplot\u0026#39; using 1:2:3 title \u0026#34;Reread performance\u0026#34; with lines pause -1 \u0026#34;Hit return to continue\u0026#34; set terminal postscript color set output \u0026#34;reread/reread.ps\u0026#34; splot \u0026#39;reread/iozone_gen_out.gnuplot\u0026#39; using 1:2:3 title \u0026#34;Reread performance\u0026#34; with lines set terminal x11 set title \u0026#34;Iozone performance\u0026#34; set grid lt 2 lw 1 set surface set xtics set ytics set logscale x 2 set logscale y 2 set autoscale z #set xrange [2.**5:2.**24] set xlabel \u0026#34;File size in 2^n KBytes\u0026#34; set ylabel \u0026#34;Record size in 2^n Kbytes\u0026#34; set zlabel \u0026#34;Kbytes/sec\u0026#34; #set data style lines set style data lines set dgrid3d 80,80,3 splot \u0026#39;randread/iozone_gen_out.gnuplot\u0026#39; using 1:2:3 title \u0026#34;Random read performance\u0026#34; with lines pause -1 \u0026#34;Hit return to continue\u0026#34; set terminal postscript color set output \u0026#34;randread/randread.ps\u0026#34; splot \u0026#39;randread/iozone_gen_out.gnuplot\u0026#39; using 1:2:3 title \u0026#34;Random read performance\u0026#34; with lines set terminal x11 set title \u0026#34;Iozone performance\u0026#34; set grid lt 2 lw 1 set surface set xtics set ytics set logscale x 2 set logscale y 2 set autoscale z #set xrange [2.**5:2.**24] set xlabel \u0026#34;File size in 2^n KBytes\u0026#34; set ylabel \u0026#34;Record size in 2^n Kbytes\u0026#34; set zlabel \u0026#34;Kbytes/sec\u0026#34; #set data style lines set style data lines set dgrid3d 80,80,3 splot \u0026#39;randwrite/iozone_gen_out.gnuplot\u0026#39; using 1:2:3 title \u0026#34;Random write performance\u0026#34; with lines pause -1 \u0026#34;Hit return to continue\u0026#34; set terminal postscript color set output \u0026#34;randwrite/randwrite.ps\u0026#34; splot \u0026#39;randwrite/iozone_gen_out.gnuplot\u0026#39; using 1:2:3 title \u0026#34;Random write performance\u0026#34; with lines set terminal x11 set title \u0026#34;Iozone performance\u0026#34; set grid lt 2 lw 1 set surface set xtics set ytics set logscale x 2 set logscale y 2 set autoscale z #set xrange [2.**5:2.**24] set xlabel \u0026#34;File size in 2^n KBytes\u0026#34; set ylabel \u0026#34;Record size in 2^n Kbytes\u0026#34; set zlabel \u0026#34;Kbytes/sec\u0026#34; #set data style lines set style data lines set dgrid3d 80,80,3 splot \u0026#39;bkwdread/iozone_gen_out.gnuplot\u0026#39; using 1:2:3 title \u0026#34;Read Backwards performance\u0026#34; with lines pause -1 \u0026#34;Hit return to continue\u0026#34; set terminal postscript color set output \u0026#34;bkwdread/bkwdread.ps\u0026#34; splot \u0026#39;bkwdread/iozone_gen_out.gnuplot\u0026#39; using 1:2:3 title \u0026#34;Read Backwards performance\u0026#34; with lines set terminal x11 set title \u0026#34;Iozone performance\u0026#34; set grid lt 2 lw 1 set surface set xtics set ytics set logscale x 2 set logscale y 2 set autoscale z #set xrange [2.**5:2.**24] set xlabel \u0026#34;File size in 2^n KBytes\u0026#34; set ylabel \u0026#34;Record size in 2^n Kbytes\u0026#34; set zlabel \u0026#34;Kbytes/sec\u0026#34; #set data style lines set style data lines set dgrid3d 80,80,3 splot \u0026#39;recrewrite/iozone_gen_out.gnuplot\u0026#39; using 1:2:3 title \u0026#34;Record rewrite performance\u0026#34; with lines pause -1 \u0026#34;Hit return to continue\u0026#34; set terminal postscript color set output \u0026#34;recrewrite/recrewrite.ps\u0026#34; splot \u0026#39;recrewrite/iozone_gen_out.gnuplot\u0026#39; using 1:2:3 title \u0026#34;Record rewrite performance\u0026#34; with lines set terminal x11 set title \u0026#34;Iozone performance\u0026#34; set grid lt 2 lw 1 set surface set xtics set ytics set logscale x 2 set logscale y 2 set autoscale z #set xrange [2.**5:2.**24] set xlabel \u0026#34;File size in 2^n KBytes\u0026#34; set ylabel \u0026#34;Record size in 2^n Kbytes\u0026#34; set zlabel \u0026#34;Kbytes/sec\u0026#34; #set data style lines set style data lines set dgrid3d 80,80,3 splot \u0026#39;strideread/iozone_gen_out.gnuplot\u0026#39; using 1:2:3 title \u0026#34;Stride read performance\u0026#34; with lines pause -1 \u0026#34;Hit return to continue\u0026#34; set terminal postscript color set output \u0026#34;strideread/strideread.ps\u0026#34; splot \u0026#39;strideread/iozone_gen_out.gnuplot\u0026#39; using 1:2:3 title \u0026#34;Stride read performance\u0026#34; with lines set terminal x11 set title \u0026#34;Iozone performance\u0026#34; set grid lt 2 lw 1 set surface set xtics set ytics set logscale x 2 set logscale y 2 set autoscale z #set xrange [2.**5:2.**24] set xlabel \u0026#34;File size in 2^n KBytes\u0026#34; set ylabel \u0026#34;Record size in 2^n Kbytes\u0026#34; set zlabel \u0026#34;Kbytes/sec\u0026#34; #set data style lines set style data lines set dgrid3d 80,80,3 splot \u0026#39;fwrite/iozone_gen_out.gnuplot\u0026#39; using 1:2:3 title \u0026#34;Fwrite performance\u0026#34; with lines pause -1 \u0026#34;Hit return to continue\u0026#34; set terminal postscript color set output \u0026#34;fwrite/fwrite.ps\u0026#34; splot \u0026#39;fwrite/iozone_gen_out.gnuplot\u0026#39; using 1:2:3 title \u0026#34;Fwrite performance\u0026#34; with lines set terminal x11 set title \u0026#34;Iozone performance\u0026#34; set grid lt 2 lw 1 set surface set xtics set ytics set logscale x 2 set logscale y 2 set autoscale z #set xrange [2.**5:2.**24] set xlabel \u0026#34;File size in 2^n KBytes\u0026#34; set ylabel \u0026#34;Record size in 2^n Kbytes\u0026#34; set zlabel \u0026#34;Kbytes/sec\u0026#34; #set data style lines set style data lines set dgrid3d 80,80,3 splot \u0026#39;frewrite/iozone_gen_out.gnuplot\u0026#39; using 1:2:3 title \u0026#34;Frewrite performance\u0026#34; with lines pause -1 \u0026#34;Hit return to continue\u0026#34; set terminal postscript color set output \u0026#34;frewrite/frewrite.ps\u0026#34; splot \u0026#39;frewrite/iozone_gen_out.gnuplot\u0026#39; using 1:2:3 title \u0026#34;Frewrite performance\u0026#34; with lines set terminal x11 set title \u0026#34;Iozone performance\u0026#34; set grid lt 2 lw 1 set surface set xtics set ytics set logscale x 2 set logscale y 2 set autoscale z #set xrange [2.**5:2.**24] set xlabel \u0026#34;File size in 2^n KBytes\u0026#34; set ylabel \u0026#34;Record size in 2^n Kbytes\u0026#34; set zlabel \u0026#34;Kbytes/sec\u0026#34; #set data style lines set style data lines set dgrid3d 80,80,3 splot \u0026#39;fread/iozone_gen_out.gnuplot\u0026#39; using 1:2:3 title \u0026#34;Fread performance\u0026#34; with lines pause -1 \u0026#34;Hit return to continue\u0026#34; set terminal postscript color set output \u0026#34;fread/fread.ps\u0026#34; splot \u0026#39;fread/iozone_gen_out.gnuplot\u0026#39; using 1:2:3 title \u0026#34;Fread performance\u0026#34; with lines set terminal x11 set title \u0026#34;Iozone performance\u0026#34; set grid lt 2 lw 1 set surface set xtics set ytics set logscale x 2 set logscale y 2 set autoscale z #set xrange [2.**5:2.**24] set xlabel \u0026#34;File size in 2^n KBytes\u0026#34; set ylabel \u0026#34;Record size in 2^n Kbytes\u0026#34; set zlabel \u0026#34;Kbytes/sec\u0026#34; #set data style lines set style data lines set dgrid3d 80,80,3 splot \u0026#39;freread/iozone_gen_out.gnuplot\u0026#39; using 1:2:3 title \u0026#34;Freread performance\u0026#34; with lines pause -1 \u0026#34;Hit return to exit\u0026#34; set terminal postscript color set output \u0026#34;freread/freread.ps\u0026#34; splot \u0026#39;freread/iozone_gen_out.gnuplot\u0026#39; using 1:2:3 title \u0026#34;Freread performance\u0026#34; with lines report.pl #!/usr/bin/perl # # arguments: one of more report files # # Christian Mautner \u0026lt;christian * mautner . ca\u0026gt;, 2005-10-31 # # This script is based loosely on the Generate_Graph set # of scripts that come with iozone, but is a complete re-write # # The main reason to write this was the need to compare the behaviour of # two or more different setups, for tuning filesystems or # comparing different pieces of hardware. # # This script is in the public domain, too short and too trivial # to deserve a copyright. # # Simply run iozone like, for example, ./iozone -a -g 4G \u0026gt; config1.out (if your machine has 4GB) # and then run perl report.pl config1.out # or get another report from another box into config2.out and run # perl report.pl config1.out config2.out # the look in the report_* directory for .png # # If you don\u0026#39;t like png or the graphic size, search for \u0026#34;set terminal\u0026#34; in this file and put whatever gnuplot # terminal you want. Note I\u0026#39;ve also noticed that gnuplot switched the set terminal png syntax # a while back, you might need \u0026#34;set terminal png small size 900,700\u0026#34; # @Reports=@ARGV; die \u0026#34;usage: $0 \u0026lt;iozone.out\u0026gt; [\u0026lt;iozone2.out\u0026gt;...]\\n\u0026#34; if not @Reports or grep (m|^-|, @Reports); die \u0026#34;report files must be in current directory\u0026#34; if grep (m|/|, @Reports); %columns=( \u0026#39;write\u0026#39; =\u0026gt;3, \u0026#39;read\u0026#39; =\u0026gt;5, \u0026#39;rewrite\u0026#39; =\u0026gt;4, \u0026#39;reread\u0026#39; =\u0026gt;6, \u0026#39;randread\u0026#39; =\u0026gt;7, \u0026#39;randwrite\u0026#39; =\u0026gt;8, \u0026#39;bkwdread\u0026#39; =\u0026gt;9, \u0026#39;recrewrite\u0026#39;=\u0026gt;10, \u0026#39;strideread\u0026#39;=\u0026gt;11, \u0026#39;fwrite\u0026#39; =\u0026gt;12, \u0026#39;frewrite\u0026#39; =\u0026gt;13, \u0026#39;fread\u0026#39; =\u0026gt;14, \u0026#39;freread\u0026#39; =\u0026gt;15, ); # # create output directory. the name is the concatenation # of all report file names (minus the file extension, plus # prefix report_) # $outdir=\u0026#34;report_\u0026#34;.join(\u0026#34;_\u0026#34;,map{/([^\\.]+)(\\..*)?/ \u0026amp;\u0026amp; $1}(@Reports)); print STDERR \u0026#34;Output directory: $outdir \u0026#34;; if ( -d $outdir ) { print STDERR \u0026#34;(removing old directory) \u0026#34;; system \u0026#34;rm -rf $outdir\u0026#34;; } mkdir $outdir or die \u0026#34;cannot make directory $outdir\u0026#34;; print STDERR \u0026#34;done.\\nPreparing data files...\u0026#34;; foreach $report (@Reports) { open(I, $report) or die \u0026#34;cannot open $report for reading\u0026#34;; $report=~/^([^\\.]+)/; $datafile=\u0026#34;$1.dat\u0026#34;; push @datafiles, $datafile; open(O, \u0026#34;\u0026gt;$outdir/$datafile\u0026#34;) or die \u0026#34;cannot open $outdir/$datafile for writing\u0026#34;; open(O2, \u0026#34;\u0026gt;$outdir/2d-$datafile\u0026#34;) or die \u0026#34;cannot open $outdir/$datafile for writing\u0026#34;; while(\u0026lt;I\u0026gt;) { next unless ( /^[\\s\\d]+$/ ); @split = split(); # We may have only 7 metrics (no block entries). Replaced == 15 with \u0026gt;=8 next unless ( @split \u0026gt;= 8 ); print O; print O2 if $split[1] == 16384 or $split[0] == $split[1]; } close I, O, O2; } print STDERR \u0026#34;done.\\nGenerating graphs:\u0026#34;; foreach $column (keys %columns) { print STDERR \u0026#34; $column\u0026#34;; open(G, \u0026#34;\u0026gt;$outdir/$column.do\u0026#34;) or die \u0026#34;cannot open $outdir/$column.do for writing\u0026#34;; print G qq{ set title \u0026#34;Iozone performance: $column\u0026#34; set grid lt 2 lw 1 set surface set parametric set xtics set ytics set logscale x 2 set logscale y 2 set autoscale z #set xrange [2.**5:2.**24] set xlabel \u0026#34;File size in KBytes\u0026#34; set ylabel \u0026#34;Record size in Kbytes\u0026#34; set zlabel \u0026#34;Kbytes/sec\u0026#34; #set data style lines set style data lines set dgrid3d 80,80,3 #set terminal png small picsize 900 700 set terminal png small size 900 700 set output \u0026#34;$column.png\u0026#34; }; print G \u0026#34;splot \u0026#34;. join(\u0026#34;, \u0026#34;, map{qq{\u0026#34;$_\u0026#34; using 1:2:$columns{$column} title \u0026#34;$_\u0026#34;}}(@datafiles)); print G \u0026#34;\\n\u0026#34;; close G; open(G, \u0026#34;\u0026gt;$outdir/2d-$column.do\u0026#34;) or die \u0026#34;cannot open $outdir/$column.do for writing\u0026#34;; print G qq{ set title \u0026#34;Iozone performance: $column\u0026#34; #set terminal png small picsize 450 350 set terminal png small size 450 350 set logscale x set xlabel \u0026#34;File size in KBytes\u0026#34; set ylabel \u0026#34;Kbytes/sec\u0026#34; set output \u0026#34;2d-$column.png\u0026#34; }; print G \u0026#34;plot \u0026#34;. join(\u0026#34;, \u0026#34;, map{qq{\u0026#34;2d-$_\u0026#34; using 1:$columns{$column} title \u0026#34;$_\u0026#34; with lines}}(@datafiles)); print G \u0026#34;\\n\u0026#34;; close G; if ( system(\u0026#34;cd $outdir \u0026amp;\u0026amp; gnuplot $column.do \u0026amp;\u0026amp; gnuplot 2d-$column.do\u0026#34;) ) { print STDERR \u0026#34;(failed) \u0026#34;; } else { print STDERR \u0026#34;(ok) \u0026#34;; } } print STDERR \u0026#34;done.\\n\u0026#34;; ","permalink":"http://localhost:1313/post/20111103-iozone-and-gnuplot-4.x/","summary":"Iozone is a great tool to mesure performance of filesystem. You could find 10 examples here.\nIn it latest version, 3.97, it came with reporting tools, report.pl and gengnuplot.sh, who use gnuplot to render images. Due to changes in GnuPlot 4.x, report.pl and gnu3d.dem need to be updated to works. Also you may get only 8 metrics in reports instead of 15 expected in latest release of report.pl\ngnu3d.dem # # $Id: 3D plot of performance # # Processes files that were created by Generate_Graphs # and displays the results.","title":"Iozone and Gnuplot 4.x"},{"content":"With the release of JBoss AS7, we see many comments around about the startup time of Application Servers. Even if this appears marginal in real life (an application server is expected to run 24/24 7/7), there is area where startup time is still important like for developpers. In developpment phase, when you have to start/stop your server dozens of times by day, you need fastest start time as possible.\nI conducted a very basic and simple test on my MacBook Pro, take various application servers and servlet containers and measure their startup time.\nAnd in this days of Java 7 fever, try these servers with OpenJDK 7 (OS/X version).\nResults on MacBook Pro - Core2Duo 2.66Ghz all time in millisecondes\nRemarks JBoss AS 6 (minimal profile) startup time was about 27s. I didn’t include it in graph to keep a good scale for others engines.\nJBoss AS6 seems to start well with OpenJDK 7 but was a bit long to stop, so I had to kill the process.\nJBoss AS7 web-profile and non certified full edition came with no webapp, so a bit less works at startup since no webapp has to be deployed and managed. Injecting a basic webapp take an extra 30ms on next starts.\nAll servers performed pretty the same under Apple JDK 1.6.0-26 and OpenJDK 7.\nConclusions Jetty is still the fastest container to start around.\nApache Tomcat team does a good job on Apache Tomcat 7, near twice faster than Apache Tomcat 6 in startup time and not too far than Jetty.\nJBoss AS7 startup speed improvements are tremendous, about 13 times faster than its predecessor JBoss AS6, congrats guys !\nRaw startup time data available here\n","permalink":"http://localhost:1313/post/20110715-servlet-containers-startup-time/","summary":"With the release of JBoss AS7, we see many comments around about the startup time of Application Servers. Even if this appears marginal in real life (an application server is expected to run 24/24 7/7), there is area where startup time is still important like for developpers. In developpment phase, when you have to start/stop your server dozens of times by day, you need fastest start time as possible.\nI conducted a very basic and simple test on my MacBook Pro, take various application servers and servlet containers and measure their startup time.","title":"Servlet Containers Startup Time"},{"content":"I recently notice that my Apache Tomcat running on OS/X 10.6.8 couldn’t use Apache Tomcat Native Library.\nINFO: The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: .:/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java Jul 13, 2011 11:02:30 AM org.apache.coyote.http11.Http11Protocol init After digging around and with the help of ASFer Mladen Turk, I figure my previous build was stick to 64bits mode only and I switched my JVM to 32bits mode using -d32.\nThe fix was then easy, just had to rebuild tomcat-native and asking OS/X gcc to produce both 32/64 bits model library using the following CLFAGS/APXSLDFLAGS.\nCFLAGS=\u0026#39;-arch i386 -arch x86_64\u0026#39; APXSLDFLAGS=\u0026#39;-arch i386-arch x86_64\u0026#39; Here is a small script I’m using now to produce Apache Tomcat Native Library on OS/X.\ncurl http://mir2.ovh.net/ftp.apache.org/dist/tomcat/tomcat-connectors/native/1.1.23/source/tomcat-native-1.1.23-src.tar.gz -o tomcat-native-1.1.23-src.tar.gz tar xvzf tomcat-native-1.1.23-src.tar.gz cd tomcat-native-1.1.23-src/jni/native CFLAGS=\u0026#39;-arch i386 -arch x86_64\u0026#39; APXSLDFLAGS=\u0026#39;-arch i386 -arch x86_64\u0026#39; ./configure --with-apr=/usr --with-ssl=/usr --with-java-home=/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home --with-apxs=/usr/sbin/apxs make clean make sudo cp .libs/libtcnative-1.0.1.23.dylib /usr/lib/java sudo rm -f /usr/lib/java/libtcnative-1.dylib sudo ln -s /usr/lib/java/libtcnative-1.0.1.23.dylib /usr/lib/java/libtcnative-1.dylib A note about Lion If you get Java on Lion using the java command on terminal or via the Java Developer Package for Mac OS X 10.7, Java headers are not on the usual location and you could find them under /System/Library/Frameworks/JavaVM.framework/Versions/A/Headers\nYou should then update the configure command line like this :\nCFLAGS=\u0026#39;-arch i386 -arch x86_64\u0026#39; APXSLDFLAGS=\u0026#39;-arch i386 -arch x86_64\u0026#39; ./configure --with-apr=/usr --with-apxs=/usr/sbin/apxs --with-ssl=/usr --with-java-home=/System/Library/Frameworks/JavaVM.framework/Versions/A/ Lion came with Xcode 4.1 and there is also an impact on linker side, libtcnative is now produced as libtcnative-1.0.dylib\nCommands became so :\ncurl http://mir2.ovh.net/ftp.apache.org/dist//tomcat/tomcat-connectors/native/1.1.23/source/tomcat-native-1.1.23-src.tar.gz -o tomcat-native-1.1.23-src.tar.gz tar xvzf tomcat-native-1.1.23-src.tar.gz cd tomcat-native-1.1.23-src/jni/native CFLAGS=\u0026#39;-arch i386 -arch x86_64\u0026#39; APXSLDFLAGS=\u0026#39;-arch i386 -arch x86_64\u0026#39; ./configure --with-apr=/usr --with-apxs=/usr/sbin/apxs --with-ssl=/usr --with-java-home=/System/Library/Frameworks/JavaVM.framework/Versions/A/ make clean make sudo cp .libs/libtcnative-1.0.dylib /usr/lib/java sudo rm -f /usr/lib/java/libtcnative-1.dylib sudo ln -s /usr/lib/java/libtcnative-1.0.dylib /usr/lib/java/libtcnative-1.dylib ","permalink":"http://localhost:1313/post/20110713-building-universal-apache-tomcat-native-library-on-osx/","summary":"I recently notice that my Apache Tomcat running on OS/X 10.6.8 couldn’t use Apache Tomcat Native Library.\nINFO: The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: .:/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java Jul 13, 2011 11:02:30 AM org.apache.coyote.http11.Http11Protocol init After digging around and with the help of ASFer Mladen Turk, I figure my previous build was stick to 64bits mode only and I switched my JVM to 32bits mode using -d32.","title":"Building Universal Apache Tomcat Native Library on OSX"},{"content":"It’s good to see works in progress for Aqua/Cocoa - AWT ports but what about JVM performances ?\nTest vms I selected 4 VMs to be tested\nApple Java 1.6.0_22 - java version \u0026quot;1.6.0_22\u0026quot; Java(TM) SE Runtime Environment (build 1.6.0_22-b04-314-10M3406a) Java HotSpot(TM) 64-Bit Server VM (build 17.1-b03-314, mixed mode)\nApple Java 1.6.0_24 - java version \u0026quot;1.6.0_24\u0026quot; Java(TM) SE Runtime Environment (build 1.6.0_24-b07-348-10M3406a) Java HotSpot(TM) 64-Bit Server VM (build 19.1-b02-348, mixed mode)\nOpenJDK 7 bsd-port - openjdk version \u0026quot;1.7.0-internal\u0026quot; OpenJDK Runtime Environment (build 1.7.0-internal-henri_2011_04_11_08_24-b00) OpenJDK 64-Bit Server VM (build 21.0-b07, mixed mode)\nOpenJDK 7 macosx-port - openjdk version \u0026quot;1.7.0-internal\u0026quot; OpenJDK Runtime Environment (build 1.7.0-internal-b00) OpenJDK 64-Bit Server VM (build 21.0-b07, mixed mode)\nTest system My test system is an Apple iMac (iMac11,1 ) with Intel i7 2.80Ghz and 8Gb DDR3 1067Mhz, running under SnowLeopard 10.6.7 64bits. I wanted to test 64bits VMs on a 64bits machine and this time use a stronger processor with more threads (ie: 4 cores with hyperthreading).\nDaCapo Benchmarks I keep the DaCapo 9.12-bach.\nBench tests launched with -n X, ie (java -jar dacapo-9.12-bach.jar -n 10 pmd)\nBench Apple JDK6 b22 Apple JDK6 b24 OpenJDK 1.7 bsd-port OpenJDK 1.7 macosx-port avrora (10 iterations) 3464ms 3406ms 3281ms 3410ms eclipse (2 iterations) 25635ms 23264ms 22156ms 23503ms fop (10 iterations) 379ms 351ms 301ms 305ms h2 (2 iterations) 5662ms 5308ms 4557ms 4694ms jython (2 iterations) 4287ms 4188ms Failure (Trace/BPT trap) 4004ms luindex (10 iterations) 2402ms 763ms 623ms 670ms lusearch (10 iterations) 1500ms 2173ms 1190ms 4019ms pmd (10 iterations) 2054ms 1860ms 1582ms 1891ms sunflow (10 iterations) 2763ms 2658ms 2342ms 2292ms tomcat (5 iterations) 1943ms 1884ms 1653ms 1778ms tradebeans (5 iterations) 6702ms 6199ms 4968ms 5080ms tradesoap (5 iterations) 20058ms 18501ms 21850ms 20114ms xalan (10 iterations) 1080ms 926ms 788ms 805ms Conclusion Latest Apple JVM, 1.6.0-24 perform better than the old 1.6.0-22 in all of the tests and is near OpenJDK 7 results.\nOpenJDK 7 from the bsd-port perform a little better than the macosx-port. The main difference in build is bsd-port is using stock gcc whereas macos-port use llvm-gcc.\nbsd-port using stock-gcc during OpenJDK build Compiling /Users/henri/Documents/jenkins/data/jobs/openjdk-1.7-bsdport-x86_64/workspace/hotspot/src/share/vm/adlc/arena.cpp rm -f ../generated/adfiles/arena.o /Users/henri/Documents/jenkins/data/jobs/openjdk-1.7-bsdport-x86_64/workspace/ALT_COMPILER_PATH/g++ -D_ALLBSD_SOURCE -D_GNU_SOURCE -DAMD64 -I/Users/henri/Documents/jenkins/data/jobs/openjdk-1.7-bsdport-x86_64/workspace/hotspot/src/share/vm/prims -I/Users/henri/Documents/jenkins/data/jobs/openjdk-1.7-bsdport-x86_64/workspace/hotspot/src/share/vm -I/Users/henri/Documents/jenkins/data/jobs/openjdk-1.7-bsdport-x86_64/workspace/hotspot/src/cpu/x86/vm -I/Users/henri/Documents/jenkins/data/jobs/openjdk-1.7-bsdport-x86_64/workspace/hotspot/src/os_cpu/bsd_x86/vm -I/Users/henri/Documents/jenkins/data/jobs/openjdk-1.7-bsdport-x86_64/workspace/hotspot/src/os/bsd/vm -I/Users/henri/Documents/jenkins/data/jobs/openjdk-1.7-bsdport-x86_64/workspace/hotspot/src/os/posix/vm -I/Users/henri/Documents/jenkins/data/jobs/openjdk-1.7-bsdport-x86_64/workspace/hotspot/src/share/vm/adlc -I../generated -DASSERT -DTARGET_OS_FAMILY_bsd -DTARGET_ARCH_x86 -DTARGET_ARCH_MODEL_x86_64 -DTARGET_OS_ARCH_bsd_x86 -DTARGET_OS_ARCH_MODEL_bsd_x86_64 -DTARGET_COMPILER_gcc -DCOMPILER2 -DCOMPILER1 -fno-rtti -fno-exceptions -pthread -fcheck-new -m64 -pipe -Werror -g -c -o ../generated/adfiles/arena.o /Users/henri/Documents/jenkins/data/jobs/openjdk-1.7-bsdport-x86_64/workspace/hotspot/src/share/vm/adlc/arena.cpp macosx-port using llvm-gcc during OpenJDK build Compiling /Users/henri/Documents/jenkins/data/jobs/openjdk-1.7-macosx-universal/workspace/hotspot/src/share/vm/adlc/arena.cpp rm -f ../generated/adfiles/arena.o llvm-g++ -D_ALLBSD_SOURCE -D_GNU_SOURCE -DIA32 -I/Users/henri/Documents/jenkins/data/jobs/openjdk-1.7-macosx-universal/workspace/hotspot/src/share/vm/prims -I/Users/henri/Documents/jenkins/data/jobs/openjdk-1.7-macosx-universal/workspace/hotspot/src/share/vm -I/Users/henri/Documents/jenkins/data/jobs/openjdk-1.7-macosx-universal/workspace/hotspot/src/cpu/x86/vm -I/Users/henri/Documents/jenkins/data/jobs/openjdk-1.7-macosx-universal/workspace/hotspot/src/os_cpu/bsd_x86/vm -I/Users/henri/Documents/jenkins/data/jobs/openjdk-1.7-macosx-universal/workspace/hotspot/src/os/bsd/vm -I/Users/henri/Documents/jenkins/data/jobs/openjdk-1.7-macosx-universal/workspace/hotspot/src/os/posix/vm -I/Users/henri/Documents/jenkins/data/jobs/openjdk-1.7-macosx-universal/workspace/hotspot/src/share/vm/adlc -I../generated -DASSERT -DTARGET_OS_FAMILY_bsd -DTARGET_ARCH_x86 -DTARGET_ARCH_MODEL_x86_32 -DTARGET_OS_ARCH_bsd_x86 -DTARGET_OS_ARCH_MODEL_bsd_x86_32 -DTARGET_COMPILER_gcc -DCOMPILER2 -DCOMPILER1 -fno-rtti -fno-exceptions -pthread -fcheck-new -m32 -march=i586 -mstackrealign -pipe -Werror -g -c -o ../generated/adfiles/arena.o /Users/henri/Documents/jenkins/data/jobs/openjdk-1.7-macosx-universal/workspace/hotspot/src/share/vm/adlc/arena.cpp Performances gain in OpenJDK7 VM vs latest Apple 6 VM is smaller than previously (see previous articles on Apple JDK vs OpenJDK 6), switching to OpenJDK 7 will not be only for pure speed but for functionalities.\n","permalink":"http://localhost:1313/post/20110416-apple-jdk-and-openjdk-back-to-benchs/","summary":"It’s good to see works in progress for Aqua/Cocoa - AWT ports but what about JVM performances ?\nTest vms I selected 4 VMs to be tested\nApple Java 1.6.0_22 - java version \u0026quot;1.6.0_22\u0026quot; Java(TM) SE Runtime Environment (build 1.6.0_22-b04-314-10M3406a) Java HotSpot(TM) 64-Bit Server VM (build 17.1-b03-314, mixed mode)\nApple Java 1.6.0_24 - java version \u0026quot;1.6.0_24\u0026quot; Java(TM) SE Runtime Environment (build 1.6.0_24-b07-348-10M3406a) Java HotSpot(TM) 64-Bit Server VM (build 19.1-b02-348, mixed mode)","title":"Apple JDK and OpenJDK - Back to Benchs"},{"content":"During the last weeks, Apple started to contribute it’s Aqua/Cocoa port to OpenJDK 7 on the macosx-port branch. It’s still works it progress but it was nice to see some SWING apps like IntelliJ IDEA works on the preliminary release.\nI used IntelliJ IDEA EAP (10.5) and tweaked it’s startup shell.sh to define AWT_TOOLKIT=CToolkit and add -Dswing.defaultlaf=com.apple.laf.AquaLookAndFeel since Aqua Look and Feel is not default for now.\nexport CLASSPATH LD_LIBRARY_PATH=.:$LD_LIBRARY_PATH export LD_LIBRARY_PATHAWT_TOOLKIT AWT/Cocoa port for OpenJDK 7 macosx-port export=CToolkit JVM_ARGS=”-Dswing.defaultlaf=com.apple.laf.AquaLookAndFeel $JVM_ARGS” cd “$IDEA_BIN_HOME” while true ; do $IDEA_JDK/bin/java $JVM_ARGS -Djb.restart.code=88 $IDEA_MAIN_CLASS_NAME $* test $? -ne 88 \u0026amp;\u0026amp; break done Then defined OpenJDK 7 from macosx port (available here) as default JVM and started IntelliJ by calling its shell script :\n[bash] export JAVA_HOME=/Library/Java/JavaVirtualMachines/1.7.0.jdk/Contents/Home /Applications/IdeaX-IU-106.396.app/bin/idea.sh [/bash]\nAnd I could see a Swing based application running on OpenJDK 7 and OS/X.\n","permalink":"http://localhost:1313/post/20110416-openjdk-7-on-osx-and-intellij-idea-eap/","summary":"During the last weeks, Apple started to contribute it’s Aqua/Cocoa port to OpenJDK 7 on the macosx-port branch. It’s still works it progress but it was nice to see some SWING apps like IntelliJ IDEA works on the preliminary release.\nI used IntelliJ IDEA EAP (10.5) and tweaked it’s startup shell.sh to define AWT_TOOLKIT=CToolkit and add -Dswing.defaultlaf=com.apple.laf.AquaLookAndFeel since Aqua Look and Feel is not default for now.\nexport CLASSPATH LD_LIBRARY_PATH=.:$LD_LIBRARY_PATH export LD_LIBRARY_PATHAWT_TOOLKIT AWT/Cocoa port for OpenJDK 7 macosx-port export=CToolkit JVM_ARGS=”-Dswing.","title":"OpenJDK 7 on OSX and IntelliJ IDEA EAP"},{"content":"Previously I did benchmark of Apple VMs and OpenJDK 6 and I wanted to see how all of the JVMs available today on our Mac on two systems, an old Core2Duo and a newer i7. And also see how they perform 32 / 64 bits kernel mode.\nSo I redo full dacapo bench suite to include OpenJDK 6, and we have now 5 VMs (3 Java 6 and 2 Java 7) :\nApple Java 1.6.0_22 - Java HotSpot(TM) 64-Bit Server VM (build 17.1-b03-314, mixed mode)\nApple Java 1.6.0_24 - Java HotSpot(TM) 64-Bit Server VM (build 19.1-b02-348, mixed mode)\nOpenJDK 7 bsd-port - OpenJDK 64-Bit Server VM (build 21.0-b07, mixed mode)\nOpenJDK 7 macosx-port - OpenJDK 64-Bit Server VM (build 21.0-b07, mixed mode)\nOpenJDK 6 macports - OpenJDK 64-Bit Server VM (build 17.0-b16, mixed mode)\nResults on MacBook Pro - Core2Duo 2.66Ghz - 32bits kernel Bench Apple JDK6 b22 Apple JDK6 b24 OpenJDK 1.7 bsd-port OpenJDK 1.7 macosx-port OpenJDK 1.6 avrora (10 iterations) 5436 5246 4917 5059 5061 eclipse (2 iterations) 49442 49529 37131 43572 37292 fop (10 iterations) 561 519 395 398 456 h2 (2 iterations) 7204 6635 6312 6341 11051 jython (2 iterations) 6517 5928 5947 luindex (10 iterations) 1095 2170 1014 985 953 lusearch (10 iterations) 7764 4379 5077 7611 5534 pmd (10 iterations) 3178 3295 2475 3438 2437 sunflow (10 iterations) 6969 7038 6543 6566 6564 tomcat (5 iterations) 4024 3924 3571 3820 tradebeans (5 iterations) 8028 7516 5851 5914 5954 tradesoap (5 iterations) 16839 14603 12477 13096 12943 xalan (10 iterations) 3128 2744 2917 3783 2816 Results on iMac - Core i7 2.8Ghz - 64bits kernel Bench Apple JDK6 b22 Apple JDK6 b24 OpenJDK 1.7 bsd-port OpenJDK 1.7 macosx-port OpenJDK 1.6 avrora (10 iterations) 3452 3349 3505 3600 3269 eclipse (2 iterations) 26081 24506 20664 22676 23706 fop (10 iterations) 392 354 299 303 324 h2 (2 iterations) 5559 5341 4814 4752 8766 jython (2 iterations) 4204 4168 4094 luindex (10 iterations) 2076 763 620 2226 643 lusearch (10 iterations) 1484 2101 2998 3055 1168 pmd (10 iterations) 2055 1884 1614 1876 1635 sunflow (10 iterations) 2808 2689 2315 2267 2276 tomcat (5 iterations) 1935 1850 1772 1751 tradebeans (5 iterations) 6633 6127 5135 5092 5242 tradesoap (5 iterations) 19250 18265 19443 20217 22195 xalan (10 iterations) 1067 1673 762 791 775 Conclusion As seen if previous article, latest Apple JVM, 1.6.0-24 perform better than the old 1.6.0-22, and still behind OpenJDK 7 and even OpenJDK 6. OpenJDK 7 bsd-port is still faster (by a small factor) than OpenJDK 7 from macosx-port (built with LLVM), in both simple threaded (Core2Duo, 2 cores) and large threaded (i7 4 cores with hyperthreading).\nThis benchmark show how good is Intel Core i7 comparing to previous generation Intel Core2Duo, roughly twice as fast.\n","permalink":"http://localhost:1313/post/20110413-apple-jdk-with-openjdkcore2duo-vs-i7/","summary":"Previously I did benchmark of Apple VMs and OpenJDK 6 and I wanted to see how all of the JVMs available today on our Mac on two systems, an old Core2Duo and a newer i7. And also see how they perform 32 / 64 bits kernel mode.\nSo I redo full dacapo bench suite to include OpenJDK 6, and we have now 5 VMs (3 Java 6 and 2 Java 7) :","title":"Apple JDK and OpenJDK – Core2Duo vs I7"},{"content":"If you’re using the Tomcat Maven Plugin and want to use post 6.0.29 Apache Tomcat, ie latest 6.0.32, you should update your pom to handle a change in artifact.\nUp to 6.0.29, Eclipse JDT compiler was bundled as jasper-jdt :\n\u0026lt;groupId\u0026gt;org.apache.tomcat\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;jasper-jdt\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;6.0.29\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; With 6.0.30, Apache Tomcat team started to bundle Eclipse JDT directly:\n[xml] org.eclipse.jdt.core.compiler ecj 3.5.1 [/xml]\nAs consequence, org.apache.tomcat/jasper-jdt artifact didn’t exist anymore after release 6.0.29.\n[caption id=”attachment_742” align=”alignnone” width=”743” caption=”Jasper JDT up to 6.0.29”] [/caption]\nFor Tomcat Maven Plugin, you should update the suggested pom like this :\n\u0026lt;build\u0026gt; \u0026lt;pluginManagement\u0026gt; \u0026lt;plugins\u0026gt; \u0026lt;plugin\u0026gt; \u0026lt;groupId\u0026gt;org.codehaus.mojo\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;tomcat-maven-plugin\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.2-SNAPSHOT\u0026lt;/version\u0026gt; \u0026lt;dependencies\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.apache.tomcat\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;catalina\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${tomcat.version}\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.apache.tomcat\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;catalina-ha\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${tomcat.version}\u0026lt;/version\u0026gt; \u0026lt;scope\u0026gt;runtime\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.apache.tomcat\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;tribes\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${tomcat.version}\u0026lt;/version\u0026gt; \u0026lt;scope\u0026gt;runtime\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.apache.tomcat\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;el-api\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${tomcat.version}\u0026lt;/version\u0026gt; \u0026lt;scope\u0026gt;runtime\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.apache.tomcat\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;jasper\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${tomcat.version}\u0026lt;/version\u0026gt; \u0026lt;scope\u0026gt;runtime\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.apache.tomcat\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;jasper-el\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${tomcat.version}\u0026lt;/version\u0026gt; \u0026lt;scope\u0026gt;runtime\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.eclipse.jdt.core.compiler\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;ecj\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;3.5.1\u0026lt;/version\u0026gt; \u0026lt;scope\u0026gt;runtime\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.apache.tomcat\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;jsp-api\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${tomcat.version}\u0026lt;/version\u0026gt; \u0026lt;scope\u0026gt;runtime\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.apache.tomcat\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;servlet-api\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${tomcat.version}\u0026lt;/version\u0026gt; \u0026lt;scope\u0026gt;runtime\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.apache.tomcat\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;coyote\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${tomcat.version}\u0026lt;/version\u0026gt; \u0026lt;scope\u0026gt;runtime\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.apache.tomcat\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;dbcp\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${tomcat.version}\u0026lt;/version\u0026gt; \u0026lt;scope\u0026gt;runtime\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;/dependencies\u0026gt; \u0026lt;/plugin\u0026gt; \u0026lt;/plugins\u0026gt; \u0026lt;/pluginManagement\u0026gt; Notice: An updated version of Tomcat Maven Plugin 1.2-SNAPSHOT has been released, this hack is no more necessary ","permalink":"http://localhost:1313/post/20110311-tomcat-maven-plugin-and-apache-tomcat-post-6.0.29/","summary":"If you’re using the Tomcat Maven Plugin and want to use post 6.0.29 Apache Tomcat, ie latest 6.0.32, you should update your pom to handle a change in artifact.\nUp to 6.0.29, Eclipse JDT compiler was bundled as jasper-jdt :\n\u0026lt;groupId\u0026gt;org.apache.tomcat\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;jasper-jdt\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;6.0.29\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; With 6.0.30, Apache Tomcat team started to bundle Eclipse JDT directly:\n[xml] org.eclipse.jdt.core.compiler ecj 3.5.1 [/xml]\nAs consequence, org.apache.tomcat/jasper-jdt artifact didn’t exist anymore after release 6.0.29.","title":"Tomcat Maven Plugin and Apache Tomcat Post 6.0.29"},{"content":"After building and packaging OpenJDK 1.7 for OS/X, I wanted to see how performed new VMs.\nTest vms Recents OpenJDK 1.7 32 and 64bits where used :\nopenjdk version \u0026quot;1.7.0-internal\u0026quot; OpenJDK Runtime Environment (build 1.7.0-internal-henri_2010_12_01_00_46-b00) OpenJDK Server VM (build 20.0-b02, mixed mode)\nopenjdk version \u0026quot;1.7.0-internal\u0026quot; OpenJDK Runtime Environment (build 1.7.0-internal-henri_2010_12_01_00_49-b00) OpenJDK 64-Bit Server VM (build 20.0-b02, mixed mode)\nTest system My test system is an Apple Mac Book Pro (MacBookPro5,1) with Intel Core 2 Duo 2.66Ghz and 4Gb DDR3 1067Mhz, running under SnowLeopard 10.6.5 32bits.\nDaCapo Benchmarks I used again DaCapo 9.12-bach, discarding batik test, this one requiring a working AWT/Swing support .\nBench tests launched with -n X, ie (java -jar dacapo-9.12-bach.jar -n 10 pmd)\nBench Apple JDK6 OpenJDK 6 OpenJDK 1.7 32bits OpenJDK 1.7 64bits avrora (10 iterations) 5247ms 4980ms 6592ms 4808ms eclipse (2 iterations) 53292ms 34404ms 40996ms 38335ms fop (10 iterations) 560ms 408ms 505ms 383ms h2 (2 iterations) Failure (pending test) 6488ms 6876ms 5557ms jython (2 iterations) 6034ms Failure (Trace/BPT trap) Failure (Trace/BPT trap) Failure (Trace/BPT trap) luindex (10 iterations) 1072ms 990ms 1034ms 967ms lusearch (10 iterations) 5997ms 3957ms 4884ms 3895ms pmd (10 iterations) 3067ms 2890ms 3085ms 2188ms sunflow (10 iterations) 6998ms 6442ms 6898ms 6719ms tomcat (5 iterations) 4108ms Failure (connection reset) 4041ms 3698ms tradebeans (5 iterations) 8257ms Failure (connection reset) 6384ms 5545ms tradesoap (5 iterations) 20472ms 12378ms 16250ms 13583ms xalan (10 iterations) 2877ms 2847ms 3071ms 2875ms Conclusion Good news, two tests Tomcat and tradebeans now pass the bench\nOpenJDK 1.7 64bits perform better than OpenJDK 1.7 32bits and OpenJDK 6.\nEven if OpenJDK 1.7 32bits performances are better than Apple Java 6, it’s allways behind OpenJDK 1.7 64bits version on OS/X, so you should select the 64bits version if performance is the key for your use.\nNext article will cover OpenJDK 1.7 and jtreg, the Regression Test Harness for the OpenJDK platform.\n","permalink":"http://localhost:1313/post/20101204-openjdk-1.7-for-osx-benchs/","summary":"After building and packaging OpenJDK 1.7 for OS/X, I wanted to see how performed new VMs.\nTest vms Recents OpenJDK 1.7 32 and 64bits where used :\nopenjdk version \u0026quot;1.7.0-internal\u0026quot; OpenJDK Runtime Environment (build 1.7.0-internal-henri_2010_12_01_00_46-b00) OpenJDK Server VM (build 20.0-b02, mixed mode)\nopenjdk version \u0026quot;1.7.0-internal\u0026quot; OpenJDK Runtime Environment (build 1.7.0-internal-henri_2010_12_01_00_49-b00) OpenJDK 64-Bit Server VM (build 20.0-b02, mixed mode)\nTest system My test system is an Apple Mac Book Pro (MacBookPro5,1) with Intel Core 2 Duo 2.","title":"OpenJDK 1.7 for OSX Benchs"},{"content":"Gildas and I create a project on GoogleCode where we’ll maintain build/package scripts and provide packages.\nMy Dropbox download page was overloaded and we needed another location, here is it :\nhttp://code.google.com/p/openjdk-osx-build/\nContributors are very welcome, especially OS/X gurus\n","permalink":"http://localhost:1313/post/20101126-openjdk-1.7-for-osx-continuous-build-with-hudson-part-3/","summary":"Gildas and I create a project on GoogleCode where we’ll maintain build/package scripts and provide packages.\nMy Dropbox download page was overloaded and we needed another location, here is it :\nhttp://code.google.com/p/openjdk-osx-build/\nContributors are very welcome, especially OS/X gurus","title":"20101126 - OpenJDK 1.7 for OSX Continuous Build With Hudson – Part 3"},{"content":"First episode of OpenJDK 1.7 for OS/X covered build of 32 and 64 bits VM via Hudson.\nWe ended with two VMs, 32bits was under build/bsd-i586/j2sdk-image and 64bits in build/bsd-amd64/j2sdk-image And here appears a new OS/X jedi, Gildas, providing .PKG and .DMG scripting.\nThis episode will describe how packaging, PKG and DMG was done.\nOS/X Package .PKG First we need to transform j2sdk-image folder into .PKG\nWe used OS/X packagemaker, provided by XCode :\n/Developer/usr/bin/packagemaker \\ --title \u0026#34;Open JDK 7 (32bits) for OS X Installer\u0026#34; \\ --version 1.0 \\ --filter \u0026#34;\\.DS_Store\u0026#34; \\ --root-volume-only \\ --domain system \\ --verbose \\ --no-relocate \\ -l \u0026#34;/Library/Java/JavaVirtualMachines/openjdk-1.7-i586\u0026#34; \\ --target 10.5 \\ --id net.openjdk.java.i586.pkg \\ --root ${SOURCE_DIR} \\ --out ${BUILD_DIR}/openjdk-1.7-i586.pkg \\ -v From .PKG to .DMG Next step is to transform the .PKG into a mountable image .DMG. Here we used hdiutil :\nhdiutil create -srcfolder ${BUILD_DIR}/openjdk-1.7-i586.pkg -volname ‘Open JDK 7 (32bits)’ -fs HFS+ -fsargs ‘-c c=64,a=16,e=16’ -format UDRW ${BUILD_DIR}/openjdk-1.7-i586-tmp.dmg hdiutil convert ${BUILD_DIR}/openjdk-1.7-i586-tmp.dmg -format UDZO -imagekey zlib-level=9 -o ${BUILD_DIR}/OpenJDK-1.7-i586.dmg Scripts for 32 and 64bits VM The following scripts could be added at the end of the Hudson script zone, or called in a second pass.\n32bits # !/bin/bash SOURCE_DIR=`pwd`/build/bsd-i586/j2sdk-image BUILD_DIR=`pwd`/java-osx DMG_MOUNT_DIR=$BUILD_DIR/mount mkdir -p ${BUILD_DIR} if [ -x build/bsd-i586/j2sdk-image/bin/java ]; then rm -f ${BUILD_DIR}/OpenJDK-1.7-i586.dmg ${BUILD_DIR}/openjdk-1.7-i586.pkg /Developer/usr/bin/packagemaker \\ --title \u0026#34;Open JDK 7 (32bits) for OS X Installer\u0026#34; \\ --version 1.0 \\ --filter \u0026#34;\\.DS_Store\u0026#34; \\ --root-volume-only \\ --domain system \\ --verbose \\ --no-relocate \\ -l \u0026#34;/Library/Java/JavaVirtualMachines/openjdk-1.7-i586\u0026#34; \\ --target 10.5 \\ --id net.openjdk.java.i586.pkg \\ --root ${SOURCE_DIR} \\ --out ${BUILD_DIR}/openjdk-1.7-i586.pkg \\ -v hdiutil create -srcfolder ${BUILD_DIR}/openjdk-1.7-i586.pkg -volname ‘Open JDK 7 (32bits)’ -fs HFS+ -fsargs ‘-c c=64,a=16,e=16’ -format UDRW ${BUILD_DIR}/openjdk-1.7-i586-tmp.dmg hdiutil convert ${BUILD_DIR}/openjdk-1.7-i586-tmp.dmg -format UDZO -imagekey zlib-level=9 -o ${BUILD_DIR}/OpenJDK-1.7-i586.dmg rm -f ${BUILD_DIR}/openjdk-1.7-i586-tmp.dmg else echo “no valid exec under build/bsd-i586/j2sdk-image/bin/java, packaging skipped” fi [/bash] 64bits # !/bin/bash SOURCE_DIR=`pwd`/build/bsd-amd64/j2sdk-image BUILD_DIR=`pwd`/java-osx DMG_MOUNT_DIR=$BUILD_DIR/mount mkdir -p ${BUILD_DIR} if [ -x build/bsd-amd64/j2sdk-image/bin/java ]; then rm -f ${BUILD_DIR}/OpenJDK-1.7-x86_64.dmg ${BUILD_DIR}/openjdk-1.7-x86_64.pkg /Developer/usr/bin/packagemaker \\ --title \u0026#34;Open JDK 7 (64bits) for OS X Installer\u0026#34; \\ --version 1.0 \\ --filter \u0026#34;\\.DS_Store\u0026#34; \\ --root-volume-only \\ --domain system \\ --verbose \\ --no-relocate \\ -l \u0026#34;/Library/Java/JavaVirtualMachines/openjdk-1.7-x86_64\u0026#34; \\ --target 10.5 \\ --id net.openjdk.java.x86_64.pkg \\ --root ${SOURCE_DIR} \\ --out ${BUILD_DIR}/openjdk-1.7-x86_64.pkg \\ -v hdiutil create -srcfolder ${BUILD_DIR}/openjdk-1.7-x86_64.pkg -volname ‘Open JDK 7 (64bits)’ -fs HFS+ -fsargs ‘-c c=64,a=16,e=16’ -format UDRW ${BUILD_DIR}/openjdk-1.7-x86_64-tmp.dmg hdiutil convert ${BUILD_DIR}/openjdk-1.7-x86_64-tmp.dmg -format UDZO -imagekey zlib-level=9 -o ${BUILD_DIR}/OpenJDK-1.7-x86_64.dmg rm -f ${BUILD_DIR}/openjdk-1.7-x86_64-tmp.dmg else echo “no valid exec under build/bsd-amd64/j2sdk-image/bin/java, packaging skipped” fi Next Step Gildas and I, will continue to improve these basic .PKG/.DMG scripts and OS/X gurus advices are more than welcome.\nNext steps is to find storage on the net so we could provide DMG regularly. Even better, an OS/X box (under SnowLeopard) available on the net, will help us provide continuous DMG.\nPlus on est de fous, ….\n","permalink":"http://localhost:1313/post/20101125-openjdk-1.7-for-osx-continuous-build-with-hudson-part-2/","summary":"First episode of OpenJDK 1.7 for OS/X covered build of 32 and 64 bits VM via Hudson.\nWe ended with two VMs, 32bits was under build/bsd-i586/j2sdk-image and 64bits in build/bsd-amd64/j2sdk-image And here appears a new OS/X jedi, Gildas, providing .PKG and .DMG scripting.\nThis episode will describe how packaging, PKG and DMG was done.\nOS/X Package .PKG First we need to transform j2sdk-image folder into .PKG\nWe used OS/X packagemaker, provided by XCode :","title":"OpenJDK 1.7 for OSX Continuous Build With Hudson - Part 2"},{"content":"Pre-requisite an OS/X box, under Snow Leopard, 32 and 64bits mode should works XCode Mercurial with hgforest extension (see my previous article on Mercurial and hgforest) Hudson with its Mercurial Plugin Hudson jobs I created free-style software project jobs, one for building 32 bits JVM, openjdk-1.7-i586, the other to build 64 bits JVM, openjdk-1.7-x86_64.\nEach one will use self sufficient script, each script will :\ndownload soylatte JVMs (i386/amd64) under $HUDSON_HOME/DROP_DIR (so it could be reused for future builds). jaxp, jaf and jaxws2 since these are not available from the url defined in ant build scripts. Also download under $HUDSON_HOME/DROP_DIR. patch project so it will build under 32 and 64bits OS/X, and will be able to build 32bits JVM on 64bits OS/X (patches commited to OpenJDK Bugzilla #100155) ","permalink":"http://localhost:1313/post/20101121-openjdk-1.7-for-osx-continuous-build-with-hudson-part-1/","summary":"Pre-requisite an OS/X box, under Snow Leopard, 32 and 64bits mode should works XCode Mercurial with hgforest extension (see my previous article on Mercurial and hgforest) Hudson with its Mercurial Plugin Hudson jobs I created free-style software project jobs, one for building 32 bits JVM, openjdk-1.7-i586, the other to build 64 bits JVM, openjdk-1.7-x86_64.\nEach one will use self sufficient script, each script will :\ndownload soylatte JVMs (i386/amd64) under $HUDSON_HOME/DROP_DIR (so it could be reused for future builds).","title":"OpenJDK 1.7 for OSX Continuous Build With Hudson - Part 1"},{"content":"I’m using Mercurial 1.7 from MacPorts to sync with OpenJDK sources. This operation is usually done with hg fclone\n[bash] hg fclone http://hg.openjdk.java.net/bsd-port/bsd-port [/bash]\nfclone came from forest\nMercurial 1.7 changes some API and call to do_read should be changed to _call.\nHopefully, I found a maintained Forest for Mercurial by GXTI and they now handle correctly pre/post Mercurial 1.6 or 1.7.\nTo install this updated extension.\nhg clone https://bitbucket.org/gxti/hgforest Make sure this forest.py is included in your ~/.hgrc\nhgext.forest=/Users/henri/hgforest/forest.py ","permalink":"http://localhost:1313/post/20101116-forest-extension-fixes-for-mercurial-1.7/","summary":"I’m using Mercurial 1.7 from MacPorts to sync with OpenJDK sources. This operation is usually done with hg fclone\n[bash] hg fclone http://hg.openjdk.java.net/bsd-port/bsd-port [/bash]\nfclone came from forest\nMercurial 1.7 changes some API and call to do_read should be changed to _call.\nHopefully, I found a maintained Forest for Mercurial by GXTI and they now handle correctly pre/post Mercurial 1.6 or 1.7.\nTo install this updated extension.\nhg clone https://bitbucket.org/gxti/hgforest Make sure this forest.","title":"Forest Extension Fixes for Mercurial 1.7"},{"content":"From finished building OpenJDK 6 on OS / X Snowleopard, I wanted to test just to see how he behaved towards the implementation of Apple. I used a development version of MacPorts (see it trac) that appears very promising and got OpenJDK 1.6.0-b20.\nopenjdk version \u0026quot;1.6.0\u0026quot; OpenJDK Runtime Environment (build 1.6.0-b20) OpenJDK 64-Bit Server VM (build 17.0-b16, mixed mode)\nA Java application with GUI under OS/X - OpenJDK First test was to launched a big application like Eclipse under OS/X with OpenJDK. I selected OpenJDK 6 as default VM by adding the properties file in this eclipse.ini Eclipse.app / Contents / MacOS / eclipse.ini\n-vm /opt/local/share/java/openjdk6/bin/java\nIt worked pretty well : A big thank you to SWT / Cocoa since there are still problems with AWT and OS / X\nSpeed and stability of OpenJDK My test system is an Apple Mac Book Pro (MacBookPro5,1) with Intel Core 2 Duo 2.66Ghz and 4Gb DDR3 1067Mhz.\nDaCapo Benchmarks I do some tests with DaCapo 9.12-bach, discarding batik test, this one requiring a working AWT/Swing support .\nBench tests launched with -n X, ie (java -jar dacapo-9.12-bach.jar -n 10 pmd)\nBench Apple JDK6 OpenJDK 6 avrora (10 iterations) 5247ms 4980ms eclipse (2 iterations) 53292ms 34404ms fop (10 iterations) 560ms 408ms h2 (2 iterations) Failure (pending test) 6488ms jython (2 iterations) 6034ms Failure (Trace/BPT trap) luindex (10 iterations) 1072ms 990ms lusearch (10 iterations) 5997ms 3957ms pmd (10 iterations) 3067ms 2890ms sunflow (10 iterations) 6998ms 6442ms tomcat (5 iterations) 4108ms Failure (connection reset) tradebeans (5 iterations) 8257ms Failure (connection reset) tradesoap (5 iterations) 20472ms 12378ms xalan (10 iterations) 2877ms 2847ms Some tests failed under OpenJDK 6, related on Tomcat / IO but as we can see in next section, Tomcat 6 or 7 worked with OpenJDK. IO Benchs with ApacheBench and Tomcat6/7 Then I wanted to see the speed of the JVM under IO load and why I made a little stress test two well-known applications, Tomcat 6 and 7. I used ApacheBench to request 1000000 time a simple URI (/examples/servlets/servlet/RequestInfoExample), with 100 concurrents clients.\nApacheBench and Tomcat were on the same machine, to avoid network bottleneck. Activity Monitor show a CPU load of 120% for Java and 20% for ab\nHere also OpenJDK 6 perform well even slighty better than Apple own implementation.\nTomcat Apple JDK 6 Open JDK 6 6.0.29 15852 req/s 16011 req/s 7.0.4beta 13700 req/s 14212 req/s Apache 6.0.29 / Open JDK 6\nServer Software: Apache-Coyote/1.1 Server Hostname: localhost Server Port: 8080 Document Path: /examples/servlets/servlet/RequestInfoExample Document Length: 715 bytes` Concurrency Level: 100 Time taken for tests: 62.456 seconds Complete requests: 1000000 Failed requests: 0 Write errors: 0 Keep-Alive requests: 1000000 Total transferred: 868001736 bytes HTML transferred: 715001430 bytes Requests per second: 16011.35 [#/sec] (mean) Time per request: 6.246 [ms] (mean) Time per request: 0.062 [ms] (mean, across all concurrent requests) Transfer rate: 13572.15 [Kbytes/sec] received Connection Times (ms) min mean[+/-sd] median max Connect: 0 0 0.0 0 3 Processing: 0 6 3.1 6 123 Waiting: 0 6 3.1 6 123 Total: 0 6 3.1 6 123 Percentage of the requests served within a certain time (ms) 50% 6 66% 6 75% 7 80% 8 90% 9 95% 11 98% 13 99% 15 100% 123 (longest request) Apache 7.0.4beta / Open JDK 6\nServer Software: Apache-Coyote/1.1 Server Hostname: localhost Server Port: 8080` Document Path: /examples/servlets/servlet/RequestInfoExample Document Length: 683 bytes` Concurrency Level: 100 Time taken for tests: 70.360 seconds Complete requests: 1000000 Failed requests: 0 Write errors: 0 Keep-Alive requests: 1000000 Total transferred: 855000855 bytes HTML transferred: 683000683 bytes Requests per second: 14212.64 [#/sec] (mean) Time per request: 7.036 [ms] (mean) Time per request: 0.070 [ms] (mean, across all concurrent requests) Transfer rate: 11867.01 [Kbytes/sec] received Connection Times (ms) min mean[+/-sd] median max Connect: 0 0 0.0 0 3 Processing: 0 7 6.6 6 379 Waiting: 0 7 6.6 6 379 Total: 0 7 6.6 6 379 Percentage of the requests served within a certain time (ms) 50% 6 66% 7 75% 8 80% 9 90% 11 95% 12 98% 14 99% 15 100% 379 (longest request) Apache 6.0.29 / Apple JDK 6\nDocument Path: /examples/servlets/servlet/RequestInfoExample Document Length: 715 bytes Concurrency Level: 100 Time taken for tests: 63.082 seconds Complete requests: 1000000 Failed requests: 0 Write errors: 0 Keep-Alive requests: 1000000 Total transferred: 868005208 bytes HTML transferred: 715004290 bytes Requests per second: 15852.36 [#/sec] (mean) Time per request: 6.308 [ms] (mean) Time per request: 0.063 [ms] (mean, across all concurrent requests) Transfer rate: 13437.43 [Kbytes/sec] received Connection Times (ms) min mean[+/-sd] median max Connect: 0 0 0.0 0 4 Processing: 0 6 3.0 6 125 Waiting: 0 6 3.0 6 125 Total: 0 6 3.0 6 125 Percentage of the requests served within a certain time (ms) 50% 6 66% 6 75% 7 80% 7 90% 9 95% 11 98% 13 99% 15 100% 125 (longest request) Apache 7.0.4beta / Apple JDK 6\nServer Software: Apache-Coyote/1.1 Server Hostname: localhost Server Port: 8080 Document Path: /examples/servlets/servlet/RequestInfoExample Document Length: 683 bytes Concurrency Level: 100 Time taken for tests: 72.992 seconds Complete requests: 1000000 Failed requests: 0 Write errors: 0 Keep-Alive requests: 1000000 Total transferred: 855067545 bytes HTML transferred: 683053957 bytes Requests per second: 13700.05 [#/sec] (mean) Time per request: 7.299 [ms] (mean) Time per request: 0.073 [ms] (mean, across all concurrent requests) Transfer rate: 11439.91 [Kbytes/sec] received Connection Times (ms) min mean[+/-sd] median max Connect: 0 0 0.0 0 6 Processing: 0 7 8.7 7 770 Waiting: 0 7 8.7 7 770 Total: 0 7 8.7 7 770 Percentage of the requests served within a certain time (ms) 50% 7 66% 8 75% 8 80% 9 90% 11 95% 12 98% 14 99% 16 100% 770 (longest request) Conclusion OpenJDK 6 appears very promising and Apple’s decision to suspend the maintenance of Java on its next OS / X will not be so bad.\nHoping now that porting AWT / Swing and Cocoa to appear quickly in the Project OpenJDK / BSD\n","permalink":"http://localhost:1313/post/20101108-osx-openjdk-6-vs-apple-jdk-6/","summary":"From finished building OpenJDK 6 on OS / X Snowleopard, I wanted to test just to see how he behaved towards the implementation of Apple. I used a development version of MacPorts (see it trac) that appears very promising and got OpenJDK 1.6.0-b20.\nopenjdk version \u0026quot;1.6.0\u0026quot; OpenJDK Runtime Environment (build 1.6.0-b20) OpenJDK 64-Bit Server VM (build 17.0-b16, mixed mode)\nA Java application with GUI under OS/X - OpenJDK First test was to launched a big application like Eclipse under OS/X with OpenJDK.","title":"OSX - OpenJDK 6 vs Apple JDK 6"},{"content":"While playing with JMeter Maven plugin, I got some problems :\nFirst the official Jakarta plugin is pretty old and no more maintened.\nSo you should get a new one, from GoogleCode This project moved to GitHub\nGreat project but it miss 2 dependencies, commons-logging and soap Without commons-logging your tests may fail and you could see :\nError in NonGUIDriver java.lang.NullPointerException [INFO] ———————————————————————— [ERROR] BUILD FAILURE [INFO] ———————————————————————— [INFO] There were test errors The fix is easy, get the plugin project and add the following dependencies in it :\n\u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;soap\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;soap\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;2.3.1\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;commons-logging\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;commons-logging\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.1.1\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; Just rebuild and install (or deploy), this updated plugin, may be changing it’s version from 1.0 to 1.1-SNAPSHOT to avoid conflict with current one.\nFull pom.xml is here :\n\u0026lt;project xmlns=\u0026#34;http://maven.apache.org/POM/4.0.0\u0026#34; xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34; xsi:schemaLocation=\u0026#34;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\u0026#34;\u0026gt; \u0026lt;modelVersion\u0026gt;4.0.0\u0026lt;/modelVersion\u0026gt; \u0026lt;groupId\u0026gt;org.apache.jmeter\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;maven-jmeter-plugin\u0026lt;/artifactId\u0026gt; \u0026lt;packaging\u0026gt;maven-plugin\u0026lt;/packaging\u0026gt; \u0026lt;version\u0026gt;1.0\u0026lt;/version\u0026gt; \u0026lt;name\u0026gt;Maven JMeter Plugin\u0026lt;/name\u0026gt; \u0026lt;url\u0026gt;http://jakarta.apache.org/jmeter\u0026lt;/url\u0026gt; \u0026lt;dependencies\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;ant\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;ant\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.6\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;commons-io\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;commons-io\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.2\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.apache.maven\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;maven-plugin-api\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;2.0\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.apache.maven\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;maven-project\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;2.0.9\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;junit\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;junit\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;3.8.1\u0026lt;/version\u0026gt; \u0026lt;scope\u0026gt;test\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.apache.jmeter\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;jmeter\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;2.3\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;soap\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;soap\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;2.3.1\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;commons-logging\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;commons-logging\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.1.1\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.apache.jmeter\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;jmeter\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;2.3\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.apache.maven.wagon\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;wagon-webdav\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.0-beta-2\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;/dependencies\u0026gt; \u0026lt;distributionManagement\u0026gt; \u0026lt;repository\u0026gt; \u0026lt;id\u0026gt;central\u0026lt;/id\u0026gt; \u0026lt;name\u0026gt;Gestalt Central Repo\u0026lt;/name\u0026gt; \u0026lt;url\u0026gt;dav://artifactory.int.gestalt-llc.com:8080/archiva/repository/repo\u0026lt;/url\u0026gt; \u0026lt;/repository\u0026gt; \u0026lt;/distributionManagement\u0026gt; \u0026lt;build\u0026gt; \u0026lt;plugins\u0026gt; \u0026lt;plugin\u0026gt; \u0026lt;groupId\u0026gt;org.apache.maven.plugins\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;maven-compiler-plugin\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;2.0.2\u0026lt;/version\u0026gt; \u0026lt;configuration\u0026gt; \u0026lt;source\u0026gt;1.5\u0026lt;/source\u0026gt; \u0026lt;target\u0026gt;1.5\u0026lt;/target\u0026gt; \u0026lt;/configuration\u0026gt; \u0026lt;/plugin\u0026gt; \u0026lt;plugin\u0026gt; \u0026lt;groupId\u0026gt;org.apache.maven.plugins\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;maven-surefire-plugin\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;2.3\u0026lt;/version\u0026gt; \u0026lt;/plugin\u0026gt; \u0026lt;/plugins\u0026gt; \u0026lt;/build\u0026gt; \u0026lt;/project\u0026gt; I hope this plugin will soon include these fixes and update JMeter to its latest version, 2.4 :)\n","permalink":"http://localhost:1313/post/20101104-maven-jmeter-plugin/","summary":"While playing with JMeter Maven plugin, I got some problems :\nFirst the official Jakarta plugin is pretty old and no more maintened.\nSo you should get a new one, from GoogleCode This project moved to GitHub\nGreat project but it miss 2 dependencies, commons-logging and soap Without commons-logging your tests may fail and you could see :\nError in NonGUIDriver java.lang.NullPointerException [INFO] ———————————————————————— [ERROR] BUILD FAILURE [INFO] ———————————————————————— [INFO] There were test errors The fix is easy, get the plugin project and add the following dependencies in it :","title":"Maven JMeter Plugin"},{"content":"In configuration with a front Apache HTTPd 2.2.x server and backend Tomcat servers, you may have defined customs error page on the HTTPd configuration using ErrorDocument directive.\nErrorDocument 401 /errors/err-401.html ErrorDocument 403 /errors/err-403.html ErrorDocument 404 /errors/err-404.html ErrorDocument 500 /errors/err-500.html ``` It works well for resources handled by HTTPd but errors for contents served by Tomcat are still handled by Tomcat error mecanism.\nImagine a web application myapp, served by a Tomcat behind HTTPd, you could have the following setup.\nJkMount /myapp/* worker1 If someone hit an inexisting page, ie /myapp/myfaultypage, you’ll get back the 404 error from Tomcat but not the one defined in HTTPd.\nSince version 1.2.27, mod_jk could handle such situation via uriworkermap use_server_errors directive.\nBut if you don’t want to change your current setup, ie using JkMount, you could use the following :\nJkMount /myapp/* worker1;use_server_errors=400 If Tomcat allready handle Page Not Found, 404, and you only wan’t to see Apache HTTPd handling error greater than or egal to 500, just use :\nJkMount /myapp/* worker1;use_server_errors=500 Thanks to Mladen for the trick :)\n","permalink":"http://localhost:1313/post/20101024-unifying-handling-of-tomcat-and-http-error-pages/","summary":"In configuration with a front Apache HTTPd 2.2.x server and backend Tomcat servers, you may have defined customs error page on the HTTPd configuration using ErrorDocument directive.\nErrorDocument 401 /errors/err-401.html ErrorDocument 403 /errors/err-403.html ErrorDocument 404 /errors/err-404.html ErrorDocument 500 /errors/err-500.html ``` It works well for resources handled by HTTPd but errors for contents served by Tomcat are still handled by Tomcat error mecanism.\nImagine a web application myapp, served by a Tomcat behind HTTPd, you could have the following setup.","title":"Unifying Handling of Tomcat and HTTP Error Pages"},{"content":"I recently bought a new Laser printer, a HP Laserjet 1102w. A very good printer bundled with a very rich firmware supporting WIFI Wep/WPA/WPA2, Bonjour, SNMP v1/v2, a web interface and much more. A definitive good choice but with a real problem for the Java developer.\nWhy ? Because HP printer agent is using the 8080 port, the default http port for Tomcat, JBoss and others servlet engines/application servers.\nOf course, you could update Tomcat or JBoss default listen ports but you could also try to update the HP printerAgent default port. There is no way for now from the UI but you could hack the driver properties.\nThe settings live under user directory, ie : ~/Library/LaunchAgents/com.hp.printerAgent.plist\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;!DOCTYPE plist PUBLIC \u0026#34;-//Apple Computer//DTD PLIST 1.0//EN\u0026#34; \u0026#34;http://www.apple.com/DTDs/PropertyList-1.0.dtd\u0026#34;\u0026gt; \u0026lt;plist version=\u0026#34;1.0\u0026#34;\u0026gt; \u0026lt;dict\u0026gt; \u0026lt;key\u0026gt;Label\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;com.hp.printerAgent\u0026lt;/string\u0026gt; \u0026lt;key\u0026gt;OnDemand\u0026lt;/key\u0026gt; \u0026lt;false/\u0026gt; \u0026lt;key\u0026gt;Program\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;/Library/Printers/hp/laserjet/P1100_1560_1600Series/printerAgent\u0026lt;/string\u0026gt; \u0026lt;key\u0026gt;ProgramArguments\u0026lt;/key\u0026gt; \u0026lt;array\u0026gt; \u0026lt;string\u0026gt;/Library/Printers/hp/laserjet/P1100_1560_1600Series/printerAgent\u0026lt;/string\u0026gt; \u0026lt;/array\u0026gt; \u0026lt;key\u0026gt;RunAtLoad\u0026lt;/key\u0026gt; \u0026lt;true/\u0026gt; \u0026lt;key\u0026gt;ServiceIPC\u0026lt;/key\u0026gt; \u0026lt;true/\u0026gt; \u0026lt;key\u0026gt;Sockets\u0026lt;/key\u0026gt; \u0026lt;dict\u0026gt; \u0026lt;key\u0026gt;MyListenerSocket\u0026lt;/key\u0026gt; \u0026lt;dict\u0026gt; \u0026lt;key\u0026gt;SockServiceName\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;8080\u0026lt;/string\u0026gt; \u0026lt;/dict\u0026gt; \u0026lt;/dict\u0026gt; \u0026lt;/dict\u0026gt; \u0026lt;/plist\u0026gt; Just change the SockServiceName from 8080 to another port, ie 58080.\nUse a Text editor or a good old sed :\nsudo sed -i “” -e “s|8080|58080|g” ~/Library/LaunchAgents/com.hp.printerAgent.plist Restart your Mac and check the ports in listening mode :\nMacBook-Pro-de-Rico:~ henri$ netstat -an | grep LISTEN tcp6 0 0 *.3689 *.* LISTEN tcp4 0 0 *.3689 *.* LISTEN tcp4 0 0 *.88 *.* LISTEN tcp6 0 0 *.88 *.* LISTEN tcp4 0 0 *.3306 *.* LISTEN tcp46 0 0 *.80 *.* LISTEN tcp46 0 0 *.5900 *.* LISTEN tcp4 0 0 *.58080 *.* LISTEN tcp6 0 0 *.58080 *.* LISTEN tcp46 0 0 *.5204 *.* LISTEN tcp4 0 0 *.5204 *.* LISTEN tcp4 0 0 *.22 *.* LISTEN tcp6 0 0 *.22 *.* LISTEN tcp4 0 0 *.139 *.* LISTEN tcp4 0 0 *.445 *.* LISTEN tcp4 0 0 *.548 *.* LISTEN tcp6 0 0 *.548 *.* LISTEN tcp4 0 0 127.0.0.1.631 *.* LISTEN tcp6 0 0 ::1.631 *.* LISTEN Et voila\n","permalink":"http://localhost:1313/post/20100925-how-to-fix-hp-laserjet-1102w-printeragent-using-port-8080-on-mac/","summary":"I recently bought a new Laser printer, a HP Laserjet 1102w. A very good printer bundled with a very rich firmware supporting WIFI Wep/WPA/WPA2, Bonjour, SNMP v1/v2, a web interface and much more. A definitive good choice but with a real problem for the Java developer.\nWhy ? Because HP printer agent is using the 8080 port, the default http port for Tomcat, JBoss and others servlet engines/application servers.\nOf course, you could update Tomcat or JBoss default listen ports but you could also try to update the HP printerAgent default port.","title":"How to Fix HP Laserjet 1102w printerAgent Using Port 8080 on Mac ?"},{"content":"If you upgraded to Tomcat 6.0.26, you have seen this kind of message in your logs:\nMay 4, 2010 5:08:46 p.m. org.apache.catalina.loader.WebappClassLoader clearReferencesThreads SEVERE: A web application Appears To Have started a thread named [Thread-8] but Has Failed to stop it. This is very Likely to create a memory leak. Or:\nMay 4, 2010 3:47:09 p.m. org.apache.catalina.loader.WebappClassLoader clearReferencesJdbc SEVERE: A web application registered the JDBC driver [com.ibm.as400.access.AS400JDBCDriver] but failed to unregister it When the web application was stopped. To Prevent a memory leak, the JDBC Driver has-been forcibly unregistered. These messages come from a new component, the [JreMemoryLeakPreventionListener] (http://wiki.apache.org/tomcat/MemoryLeakProtection) that monitors threads and JDBC drivers created by your web applications when unloading a webapp.\nIt is enabled by default and can be found in the server.xml in the this conf of your Tomcat installation.\n\u0026lt;! - Prevent memory leaks due to use of Particular java / javax APIs - \u0026gt; \u0026lt;Listener className = \u0026#34; \u0026#34; org.apache.catalina.core.JreMemoryLeakPreventionListener /\u0026gt; Even though it is not recommended to disable this control, which allows you to trace memory leaks, you can return to the previous situation without ‘monitoring’ commenting on the Listener.\n","permalink":"http://localhost:1313/post/20100504-disable-tomcat-memory-leak-detector/","summary":"If you upgraded to Tomcat 6.0.26, you have seen this kind of message in your logs:\nMay 4, 2010 5:08:46 p.m. org.apache.catalina.loader.WebappClassLoader clearReferencesThreads SEVERE: A web application Appears To Have started a thread named [Thread-8] but Has Failed to stop it. This is very Likely to create a memory leak. Or:\nMay 4, 2010 3:47:09 p.m. org.apache.catalina.loader.WebappClassLoader clearReferencesJdbc SEVERE: A web application registered the JDBC driver [com.ibm.as400.access.AS400JDBCDriver] but failed to unregister it When the web application was stopped.","title":"Disable Tomcat Memory Leak Detector"},{"content":"Jul 15th, 2011\nWith the release of JBoss AS7, we see many comments around about the startup time of Application Servers. Even if this appears marginal in real life (an application server is expected to run 24/24 7/7), there is area where startup time is still important like for developpers. In developpment phase, when you have to start/stop your server dozens of times by day, you need fastest start time as possible.\nI conducted a very basic and simple test on my MacBook Pro, take various application servers and servlet containers and measure their startup time.\nAnd in this days of Java 7 fever, try these servers with OpenJDK 7 (OS/X version).\nResults on MacBook Pro - Core2Duo 2.66Ghz all time in millisecondes\nRemarks JBoss AS 6 (minimal profile) startup time was about 27s. I didn’t include it in graph to keep a good scale for others engines\nJBoss AS6 seems to start well with OpenJDK 7 but was a bit long to stop, so I had to kill the process\nJBoss AS7 web-profile and non certified full edition came with no webapp, so a bit less works at startup since no webapp has to be deployed and managed. Injecting a basic webapp take an extra 30ms on next starts.\nAll servers performed pretty the same under Apple JDK 1.6.0-26 and OpenJDK 7.\nConclusions Jetty is still the fastest container to start around.\nApache Tomcat team does a good job on Apache Tomcat 7, near twice faster than Apache Tomcat 6 in startup time and not too far than Jetty.\nJBoss AS7 startup speed improvements are tremendous, about 13 times faster than its predecessor JBoss AS6, congrats guys !\nRaw startup time data available here\n","permalink":"http://localhost:1313/post/20110615-servlet-containers-startup-time/","summary":"Jul 15th, 2011\nWith the release of JBoss AS7, we see many comments around about the startup time of Application Servers. Even if this appears marginal in real life (an application server is expected to run 24/24 7/7), there is area where startup time is still important like for developpers. In developpment phase, when you have to start/stop your server dozens of times by day, you need fastest start time as possible.","title":""}]