<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>OpenJDK on Rico&#39;s Blog</title>
    <link>http://localhost:1313/tags/openjdk/</link>
    <description>Recent content in OpenJDK on Rico&#39;s Blog</description>
    <generator>Hugo -- 0.128.0</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 16 Apr 2011 13:20:23 +0200</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/openjdk/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Apple JDK and OpenJDK - Back to Benchs</title>
      <link>http://localhost:1313/post/20110416-apple-jdk-and-openjdk-back-to-benchs/</link>
      <pubDate>Sat, 16 Apr 2011 13:20:23 +0200</pubDate>
      <guid>http://localhost:1313/post/20110416-apple-jdk-and-openjdk-back-to-benchs/</guid>
      <description>It’s good to see works in progress for Aqua/Cocoa - AWT ports but what about JVM performances ?
Test vms I selected 4 VMs to be tested
Apple Java 1.6.0_22 - java version &amp;quot;1.6.0_22&amp;quot; Java(TM) SE Runtime Environment (build 1.6.0_22-b04-314-10M3406a) Java HotSpot(TM) 64-Bit Server VM (build 17.1-b03-314, mixed mode)
Apple Java 1.6.0_24 - java version &amp;quot;1.6.0_24&amp;quot; Java(TM) SE Runtime Environment (build 1.6.0_24-b07-348-10M3406a) Java HotSpot(TM) 64-Bit Server VM (build 19.1-b02-348, mixed mode)</description>
    </item>
    <item>
      <title>OpenJDK 7 on OSX and IntelliJ IDEA EAP</title>
      <link>http://localhost:1313/post/20110416-openjdk-7-on-osx-and-intellij-idea-eap/</link>
      <pubDate>Sat, 16 Apr 2011 13:20:23 +0200</pubDate>
      <guid>http://localhost:1313/post/20110416-openjdk-7-on-osx-and-intellij-idea-eap/</guid>
      <description>During the last weeks, Apple started to contribute it’s Aqua/Cocoa port to OpenJDK 7 on the macosx-port branch. It’s still works it progress but it was nice to see some SWING apps like IntelliJ IDEA works on the preliminary release.
I used IntelliJ IDEA EAP (10.5) and tweaked it’s startup shell.sh to define AWT_TOOLKIT=CToolkit and add -Dswing.defaultlaf=com.apple.laf.AquaLookAndFeel since Aqua Look and Feel is not default for now.
export CLASSPATH LD_LIBRARY_PATH=.:$LD_LIBRARY_PATH export LD_LIBRARY_PATHAWT_TOOLKIT AWT/Cocoa port for OpenJDK 7 macosx-port export=CToolkit JVM_ARGS=”-Dswing.</description>
    </item>
    <item>
      <title>Apple JDK and OpenJDK – Core2Duo vs I7</title>
      <link>http://localhost:1313/post/20110413-apple-jdk-with-openjdkcore2duo-vs-i7/</link>
      <pubDate>Wed, 13 Apr 2011 13:20:23 +0200</pubDate>
      <guid>http://localhost:1313/post/20110413-apple-jdk-with-openjdkcore2duo-vs-i7/</guid>
      <description>Previously I did benchmark of Apple VMs and OpenJDK 6 and I wanted to see how all of the JVMs available today on our Mac on two systems, an old Core2Duo and a newer i7. And also see how they perform 32 / 64 bits kernel mode.
So I redo full dacapo bench suite to include OpenJDK 6, and we have now 5 VMs (3 Java 6 and 2 Java 7) :</description>
    </item>
    <item>
      <title>OpenJDK 1.7 for OSX Benchs</title>
      <link>http://localhost:1313/post/20101204-openjdk-1.7-for-osx-benchs/</link>
      <pubDate>Sat, 04 Dec 2010 13:20:23 +0200</pubDate>
      <guid>http://localhost:1313/post/20101204-openjdk-1.7-for-osx-benchs/</guid>
      <description>After building and packaging OpenJDK 1.7 for OS/X, I wanted to see how performed new VMs.
Test vms Recents OpenJDK 1.7 32 and 64bits where used :
openjdk version &amp;quot;1.7.0-internal&amp;quot; OpenJDK Runtime Environment (build 1.7.0-internal-henri_2010_12_01_00_46-b00) OpenJDK Server VM (build 20.0-b02, mixed mode)
openjdk version &amp;quot;1.7.0-internal&amp;quot; OpenJDK Runtime Environment (build 1.7.0-internal-henri_2010_12_01_00_49-b00) OpenJDK 64-Bit Server VM (build 20.0-b02, mixed mode)
Test system My test system is an Apple Mac Book Pro (MacBookPro5,1) with Intel Core 2 Duo 2.</description>
    </item>
    <item>
      <title>20101126 - OpenJDK 1.7 for OSX Continuous Build With Hudson – Part 3</title>
      <link>http://localhost:1313/post/20101126-openjdk-1.7-for-osx-continuous-build-with-hudson-part-3/</link>
      <pubDate>Fri, 26 Nov 2010 13:20:23 +0200</pubDate>
      <guid>http://localhost:1313/post/20101126-openjdk-1.7-for-osx-continuous-build-with-hudson-part-3/</guid>
      <description>Gildas and I create a project on GoogleCode where we’ll maintain build/package scripts and provide packages.
My Dropbox download page was overloaded and we needed another location, here is it :
http://code.google.com/p/openjdk-osx-build/
Contributors are very welcome, especially OS/X gurus</description>
    </item>
    <item>
      <title>OpenJDK 1.7 for OSX Continuous Build With Hudson - Part 2</title>
      <link>http://localhost:1313/post/20101125-openjdk-1.7-for-osx-continuous-build-with-hudson-part-2/</link>
      <pubDate>Thu, 25 Nov 2010 13:20:23 +0200</pubDate>
      <guid>http://localhost:1313/post/20101125-openjdk-1.7-for-osx-continuous-build-with-hudson-part-2/</guid>
      <description>First episode of OpenJDK 1.7 for OS/X covered build of 32 and 64 bits VM via Hudson.
We ended with two VMs, 32bits was under build/bsd-i586/j2sdk-image and 64bits in build/bsd-amd64/j2sdk-image And here appears a new OS/X jedi, Gildas, providing .PKG and .DMG scripting.
This episode will describe how packaging, PKG and DMG was done.
OS/X Package .PKG First we need to transform j2sdk-image folder into .PKG
We used OS/X packagemaker, provided by XCode :</description>
    </item>
    <item>
      <title>OpenJDK 1.7 for OSX Continuous Build With Hudson - Part 1</title>
      <link>http://localhost:1313/post/20101121-openjdk-1.7-for-osx-continuous-build-with-hudson-part-1/</link>
      <pubDate>Sun, 21 Nov 2010 13:20:23 +0200</pubDate>
      <guid>http://localhost:1313/post/20101121-openjdk-1.7-for-osx-continuous-build-with-hudson-part-1/</guid>
      <description>Pre-requisite an OS/X box, under Snow Leopard, 32 and 64bits mode should works XCode Mercurial with hgforest extension (see my previous article on Mercurial and hgforest) Hudson with its Mercurial Plugin Hudson jobs I created free-style software project jobs, one for building 32 bits JVM, openjdk-1.7-i586, the other to build 64 bits JVM, openjdk-1.7-x86_64.
Each one will use self sufficient script, each script will :
download soylatte JVMs (i386/amd64) under $HUDSON_HOME/DROP_DIR (so it could be reused for future builds).</description>
    </item>
    <item>
      <title>OSX - OpenJDK 6 vs Apple JDK 6</title>
      <link>http://localhost:1313/post/20101108-osx-openjdk-6-vs-apple-jdk-6/</link>
      <pubDate>Mon, 08 Nov 2010 13:20:23 +0200</pubDate>
      <guid>http://localhost:1313/post/20101108-osx-openjdk-6-vs-apple-jdk-6/</guid>
      <description>From finished building OpenJDK 6 on OS / X Snowleopard, I wanted to test just to see how he behaved towards the implementation of Apple. I used a development version of MacPorts (see it trac) that appears very promising and got OpenJDK 1.6.0-b20.
openjdk version &amp;quot;1.6.0&amp;quot; OpenJDK Runtime Environment (build 1.6.0-b20) OpenJDK 64-Bit Server VM (build 17.0-b16, mixed mode)
A Java application with GUI under OS/X - OpenJDK First test was to launched a big application like Eclipse under OS/X with OpenJDK.</description>
    </item>
  </channel>
</rss>
